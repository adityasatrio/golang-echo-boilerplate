// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package user

import (
	"github.com/google/wire"
	"myapp/ent"
	repository2 "myapp/internal/applications/role/repository"
	repository3 "myapp/internal/applications/role_user/repository"
	"myapp/internal/applications/transaction"
	"myapp/internal/applications/user/repository"
	"myapp/internal/applications/user/service"
)

// Injectors from user_injector.go:

func InitializedUserService(dbClient *ent.Client) *service.UserServiceImpl {
	userRepositoryImpl := repository.NewUserRepositoryImpl(dbClient)
	roleRepositoryImpl := repository2.NewRoleRepositoryImpl(dbClient)
	roleUserRepositoryImpl := repository3.NewRoleUserRepositoryImpl(dbClient)
	trxServiceImpl := transaction.NewTrxServiceImpl(dbClient)
	userServiceImpl := service.NewUserServiceImpl(userRepositoryImpl, roleRepositoryImpl, roleUserRepositoryImpl, trxServiceImpl)
	return userServiceImpl
}

// user_injector.go:

var providerUser = wire.NewSet(repository.NewUserRepositoryImpl, repository2.NewRoleRepositoryImpl, repository3.NewRoleUserRepositoryImpl, transaction.NewTrxServiceImpl, service.NewUserServiceImpl, wire.Bind(new(repository.UserRepository), new(*repository.UserRepositoryImpl)), wire.Bind(new(repository2.RoleRepository), new(*repository2.RoleRepositoryImpl)), wire.Bind(new(repository3.RoleUserRepository), new(*repository3.RoleUserRepositoryImpl)), wire.Bind(new(transaction.TrxService), new(*transaction.TrxServiceImpl)), wire.Bind(new(service.UserService), new(*service.UserServiceImpl)))
