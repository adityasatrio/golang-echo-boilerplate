// Code generated by mockery v2.23.0. DO NOT EDIT.

package mock_repository

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// HelloWorldsRepository is an autogenerated mock type for the HelloWorldsRepository type
type HelloWorldsRepository struct {
	mock.Mock
}

// Hello provides a mock function with given fields: ctx, message, errorFlag
func (_m *HelloWorldsRepository) Hello(ctx context.Context, message string, errorFlag string) (string, error) {
	ret := _m.Called(ctx, message, errorFlag)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, message, errorFlag)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, message, errorFlag)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, message, errorFlag)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewHelloWorldsRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewHelloWorldsRepository creates a new instance of HelloWorldsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHelloWorldsRepository(t mockConstructorTestingTNewHelloWorldsRepository) *HelloWorldsRepository {
	mock := &HelloWorldsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
