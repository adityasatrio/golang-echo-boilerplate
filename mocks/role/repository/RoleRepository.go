// Code generated by mockery v2.23.0. DO NOT EDIT.

package mock_repository

import (
	context "context"
	ent "myapp/ent"

	mock "github.com/stretchr/testify/mock"
)

// RoleRepository is an autogenerated mock type for the RoleRepository type
type RoleRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, role
func (_m *RoleRepository) Create(ctx context.Context, role ent.Role) (*ent.Role, error) {
	ret := _m.Called(ctx, role)

	var r0 *ent.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ent.Role) (*ent.Role, error)); ok {
		return rf(ctx, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ent.Role) *ent.Role); ok {
		r0 = rf(ctx, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ent.Role) error); ok {
		r1 = rf(ctx, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *RoleRepository) Delete(ctx context.Context, id uint64) (*ent.Role, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*ent.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *ent.Role); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *RoleRepository) GetAll(ctx context.Context) ([]*ent.Role, error) {
	ret := _m.Called(ctx)

	var r0 []*ent.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.Role, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.Role); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *RoleRepository) GetById(ctx context.Context, id uint64) (*ent.Role, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*ent.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *ent.Role); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SoftDelete provides a mock function with given fields: ctx, id
func (_m *RoleRepository) SoftDelete(ctx context.Context, id uint64) (*ent.Role, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64) (*ent.Role, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64) *ent.Role); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, role, id
func (_m *RoleRepository) Update(ctx context.Context, role ent.Role, id uint64) (*ent.Role, error) {
	ret := _m.Called(ctx, role, id)

	var r0 *ent.Role
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ent.Role, uint64) (*ent.Role, error)); ok {
		return rf(ctx, role, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ent.Role, uint64) *ent.Role); ok {
		r0 = rf(ctx, role, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.Role)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ent.Role, uint64) error); ok {
		r1 = rf(ctx, role, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRoleRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRoleRepository creates a new instance of RoleRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRoleRepository(t mockConstructorTestingTNewRoleRepository) *RoleRepository {
	mock := &RoleRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
