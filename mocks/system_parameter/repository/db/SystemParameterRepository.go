// Code generated by mockery v2.23.0. DO NOT EDIT.

package mock_db

import (
	context "context"

	ent "myapp/ent"

	mock "github.com/stretchr/testify/mock"
)

// SystemParameterRepository is an autogenerated mock type for the SystemParameterRepository type
type SystemParameterRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, newData
func (_m *SystemParameterRepository) Create(ctx context.Context, newData ent.System_parameter) (*ent.System_parameter, error) {
	ret := _m.Called(ctx, newData)

	var r0 *ent.System_parameter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ent.System_parameter) (*ent.System_parameter, error)); ok {
		return rf(ctx, newData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ent.System_parameter) *ent.System_parameter); ok {
		r0 = rf(ctx, newData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.System_parameter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, ent.System_parameter) error); ok {
		r1 = rf(ctx, newData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: ctx, id
func (_m *SystemParameterRepository) Delete(ctx context.Context, id int) (*ent.System_parameter, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.System_parameter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*ent.System_parameter, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.System_parameter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.System_parameter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAll provides a mock function with given fields: ctx
func (_m *SystemParameterRepository) GetAll(ctx context.Context) ([]*ent.System_parameter, error) {
	ret := _m.Called(ctx)

	var r0 []*ent.System_parameter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ent.System_parameter, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ent.System_parameter); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ent.System_parameter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *SystemParameterRepository) GetById(ctx context.Context, id int) (*ent.System_parameter, error) {
	ret := _m.Called(ctx, id)

	var r0 *ent.System_parameter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (*ent.System_parameter, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) *ent.System_parameter); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.System_parameter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByKey provides a mock function with given fields: ctx, key
func (_m *SystemParameterRepository) GetByKey(ctx context.Context, key string) (*ent.System_parameter, error) {
	ret := _m.Called(ctx, key)

	var r0 *ent.System_parameter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*ent.System_parameter, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *ent.System_parameter); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.System_parameter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, id, updateData
func (_m *SystemParameterRepository) Update(ctx context.Context, id int, updateData ent.System_parameter) (*ent.System_parameter, error) {
	ret := _m.Called(ctx, id, updateData)

	var r0 *ent.System_parameter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ent.System_parameter) (*ent.System_parameter, error)); ok {
		return rf(ctx, id, updateData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ent.System_parameter) *ent.System_parameter); ok {
		r0 = rf(ctx, id, updateData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.System_parameter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ent.System_parameter) error); ok {
		r1 = rf(ctx, id, updateData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSystemParameterRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSystemParameterRepository creates a new instance of SystemParameterRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSystemParameterRepository(t mockConstructorTestingTNewSystemParameterRepository) *SystemParameterRepository {
	mock := &SystemParameterRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
