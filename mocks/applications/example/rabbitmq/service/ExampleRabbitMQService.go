// Code generated by mockery v2.30.1. DO NOT EDIT.

package mock_service

import (
	context "context"
	ent "myapp/ent"
	dto "myapp/internal/applications/system_parameter/dto"

	mock "github.com/stretchr/testify/mock"
)

// ExampleRabbitMQService is an autogenerated mock type for the ExampleRabbitMQService type
type ExampleRabbitMQService struct {
	mock.Mock
}

// GetMessage provides a mock function with given fields: ctx, create
func (_m *ExampleRabbitMQService) GetMessage(ctx context.Context, create *dto.SystemParameterCreateRequest) (*ent.SystemParameter, error) {
	ret := _m.Called(ctx, create)

	var r0 *ent.SystemParameter
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SystemParameterCreateRequest) (*ent.SystemParameter, error)); ok {
		return rf(ctx, create)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *dto.SystemParameterCreateRequest) *ent.SystemParameter); ok {
		r0 = rf(ctx, create)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ent.SystemParameter)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *dto.SystemParameterCreateRequest) error); ok {
		r1 = rf(ctx, create)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewExampleRabbitMQService creates a new instance of ExampleRabbitMQService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExampleRabbitMQService(t interface {
	mock.TestingT
	Cleanup(func())
}) *ExampleRabbitMQService {
	mock := &ExampleRabbitMQService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
