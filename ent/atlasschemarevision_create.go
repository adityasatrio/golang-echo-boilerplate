// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/atlasschemarevision"
	"myapp/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AtlasSchemaRevisionCreate is the builder for creating a AtlasSchemaRevision entity.
type AtlasSchemaRevisionCreate struct {
	config
	mutation *AtlasSchemaRevisionMutation
	hooks    []Hook
}

// SetDescription sets the "description" field.
func (asrc *AtlasSchemaRevisionCreate) SetDescription(s string) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetDescription(s)
	return asrc
}

// SetType sets the "type" field.
func (asrc *AtlasSchemaRevisionCreate) SetType(u uint64) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetType(u)
	return asrc
}

// SetApplied sets the "applied" field.
func (asrc *AtlasSchemaRevisionCreate) SetApplied(i int) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetApplied(i)
	return asrc
}

// SetTotal sets the "total" field.
func (asrc *AtlasSchemaRevisionCreate) SetTotal(i int) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetTotal(i)
	return asrc
}

// SetExecutedAt sets the "executed_at" field.
func (asrc *AtlasSchemaRevisionCreate) SetExecutedAt(t time.Time) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetExecutedAt(t)
	return asrc
}

// SetExecutionTime sets the "execution_time" field.
func (asrc *AtlasSchemaRevisionCreate) SetExecutionTime(i int) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetExecutionTime(i)
	return asrc
}

// SetError sets the "error" field.
func (asrc *AtlasSchemaRevisionCreate) SetError(s string) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetError(s)
	return asrc
}

// SetNillableError sets the "error" field if the given value is not nil.
func (asrc *AtlasSchemaRevisionCreate) SetNillableError(s *string) *AtlasSchemaRevisionCreate {
	if s != nil {
		asrc.SetError(*s)
	}
	return asrc
}

// SetErrorStmt sets the "error_stmt" field.
func (asrc *AtlasSchemaRevisionCreate) SetErrorStmt(s string) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetErrorStmt(s)
	return asrc
}

// SetNillableErrorStmt sets the "error_stmt" field if the given value is not nil.
func (asrc *AtlasSchemaRevisionCreate) SetNillableErrorStmt(s *string) *AtlasSchemaRevisionCreate {
	if s != nil {
		asrc.SetErrorStmt(*s)
	}
	return asrc
}

// SetHash sets the "hash" field.
func (asrc *AtlasSchemaRevisionCreate) SetHash(s string) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetHash(s)
	return asrc
}

// SetPartialHashes sets the "partial_hashes" field.
func (asrc *AtlasSchemaRevisionCreate) SetPartialHashes(sh *schema.PartialHashes) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetPartialHashes(sh)
	return asrc
}

// SetOperatorVersion sets the "operator_version" field.
func (asrc *AtlasSchemaRevisionCreate) SetOperatorVersion(s string) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetOperatorVersion(s)
	return asrc
}

// SetID sets the "id" field.
func (asrc *AtlasSchemaRevisionCreate) SetID(s string) *AtlasSchemaRevisionCreate {
	asrc.mutation.SetID(s)
	return asrc
}

// Mutation returns the AtlasSchemaRevisionMutation object of the builder.
func (asrc *AtlasSchemaRevisionCreate) Mutation() *AtlasSchemaRevisionMutation {
	return asrc.mutation
}

// Save creates the AtlasSchemaRevision in the database.
func (asrc *AtlasSchemaRevisionCreate) Save(ctx context.Context) (*AtlasSchemaRevision, error) {
	var (
		err  error
		node *AtlasSchemaRevision
	)
	if len(asrc.hooks) == 0 {
		if err = asrc.check(); err != nil {
			return nil, err
		}
		node, err = asrc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AtlasSchemaRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = asrc.check(); err != nil {
				return nil, err
			}
			asrc.mutation = mutation
			if node, err = asrc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(asrc.hooks) - 1; i >= 0; i-- {
			if asrc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asrc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asrc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AtlasSchemaRevision)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AtlasSchemaRevisionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (asrc *AtlasSchemaRevisionCreate) SaveX(ctx context.Context) *AtlasSchemaRevision {
	v, err := asrc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asrc *AtlasSchemaRevisionCreate) Exec(ctx context.Context) error {
	_, err := asrc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asrc *AtlasSchemaRevisionCreate) ExecX(ctx context.Context) {
	if err := asrc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (asrc *AtlasSchemaRevisionCreate) check() error {
	if _, ok := asrc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "AtlasSchemaRevision.description"`)}
	}
	if _, ok := asrc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "AtlasSchemaRevision.type"`)}
	}
	if _, ok := asrc.mutation.Applied(); !ok {
		return &ValidationError{Name: "applied", err: errors.New(`ent: missing required field "AtlasSchemaRevision.applied"`)}
	}
	if _, ok := asrc.mutation.Total(); !ok {
		return &ValidationError{Name: "total", err: errors.New(`ent: missing required field "AtlasSchemaRevision.total"`)}
	}
	if _, ok := asrc.mutation.ExecutedAt(); !ok {
		return &ValidationError{Name: "executed_at", err: errors.New(`ent: missing required field "AtlasSchemaRevision.executed_at"`)}
	}
	if _, ok := asrc.mutation.ExecutionTime(); !ok {
		return &ValidationError{Name: "execution_time", err: errors.New(`ent: missing required field "AtlasSchemaRevision.execution_time"`)}
	}
	if _, ok := asrc.mutation.Hash(); !ok {
		return &ValidationError{Name: "hash", err: errors.New(`ent: missing required field "AtlasSchemaRevision.hash"`)}
	}
	if _, ok := asrc.mutation.OperatorVersion(); !ok {
		return &ValidationError{Name: "operator_version", err: errors.New(`ent: missing required field "AtlasSchemaRevision.operator_version"`)}
	}
	return nil
}

func (asrc *AtlasSchemaRevisionCreate) sqlSave(ctx context.Context) (*AtlasSchemaRevision, error) {
	_node, _spec := asrc.createSpec()
	if err := sqlgraph.CreateNode(ctx, asrc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AtlasSchemaRevision.ID type: %T", _spec.ID.Value)
		}
	}
	return _node, nil
}

func (asrc *AtlasSchemaRevisionCreate) createSpec() (*AtlasSchemaRevision, *sqlgraph.CreateSpec) {
	var (
		_node = &AtlasSchemaRevision{config: asrc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: atlasschemarevision.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: atlasschemarevision.FieldID,
			},
		}
	)
	if id, ok := asrc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := asrc.mutation.Description(); ok {
		_spec.SetField(atlasschemarevision.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := asrc.mutation.GetType(); ok {
		_spec.SetField(atlasschemarevision.FieldType, field.TypeUint64, value)
		_node.Type = value
	}
	if value, ok := asrc.mutation.Applied(); ok {
		_spec.SetField(atlasschemarevision.FieldApplied, field.TypeInt, value)
		_node.Applied = value
	}
	if value, ok := asrc.mutation.Total(); ok {
		_spec.SetField(atlasschemarevision.FieldTotal, field.TypeInt, value)
		_node.Total = value
	}
	if value, ok := asrc.mutation.ExecutedAt(); ok {
		_spec.SetField(atlasschemarevision.FieldExecutedAt, field.TypeTime, value)
		_node.ExecutedAt = value
	}
	if value, ok := asrc.mutation.ExecutionTime(); ok {
		_spec.SetField(atlasschemarevision.FieldExecutionTime, field.TypeInt, value)
		_node.ExecutionTime = value
	}
	if value, ok := asrc.mutation.Error(); ok {
		_spec.SetField(atlasschemarevision.FieldError, field.TypeString, value)
		_node.Error = value
	}
	if value, ok := asrc.mutation.ErrorStmt(); ok {
		_spec.SetField(atlasschemarevision.FieldErrorStmt, field.TypeString, value)
		_node.ErrorStmt = value
	}
	if value, ok := asrc.mutation.Hash(); ok {
		_spec.SetField(atlasschemarevision.FieldHash, field.TypeString, value)
		_node.Hash = value
	}
	if value, ok := asrc.mutation.PartialHashes(); ok {
		_spec.SetField(atlasschemarevision.FieldPartialHashes, field.TypeJSON, value)
		_node.PartialHashes = value
	}
	if value, ok := asrc.mutation.OperatorVersion(); ok {
		_spec.SetField(atlasschemarevision.FieldOperatorVersion, field.TypeString, value)
		_node.OperatorVersion = value
	}
	return _node, _spec
}

// AtlasSchemaRevisionCreateBulk is the builder for creating many AtlasSchemaRevision entities in bulk.
type AtlasSchemaRevisionCreateBulk struct {
	config
	builders []*AtlasSchemaRevisionCreate
}

// Save creates the AtlasSchemaRevision entities in the database.
func (asrcb *AtlasSchemaRevisionCreateBulk) Save(ctx context.Context) ([]*AtlasSchemaRevision, error) {
	specs := make([]*sqlgraph.CreateSpec, len(asrcb.builders))
	nodes := make([]*AtlasSchemaRevision, len(asrcb.builders))
	mutators := make([]Mutator, len(asrcb.builders))
	for i := range asrcb.builders {
		func(i int, root context.Context) {
			builder := asrcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AtlasSchemaRevisionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, asrcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, asrcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, asrcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (asrcb *AtlasSchemaRevisionCreateBulk) SaveX(ctx context.Context) []*AtlasSchemaRevision {
	v, err := asrcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (asrcb *AtlasSchemaRevisionCreateBulk) Exec(ctx context.Context) error {
	_, err := asrcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asrcb *AtlasSchemaRevisionCreateBulk) ExecX(ctx context.Context) {
	if err := asrcb.Exec(ctx); err != nil {
		panic(err)
	}
}
