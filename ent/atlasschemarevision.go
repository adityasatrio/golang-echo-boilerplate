// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"myapp/ent/atlasschemarevision"
	"myapp/ent/schema"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// AtlasSchemaRevision is the model entity for the AtlasSchemaRevision schema.
type AtlasSchemaRevision struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Type holds the value of the "type" field.
	Type uint64 `json:"type,omitempty"`
	// Applied holds the value of the "applied" field.
	Applied int `json:"applied,omitempty"`
	// Total holds the value of the "total" field.
	Total int `json:"total,omitempty"`
	// ExecutedAt holds the value of the "executed_at" field.
	ExecutedAt time.Time `json:"executed_at,omitempty"`
	// ExecutionTime holds the value of the "execution_time" field.
	ExecutionTime int `json:"execution_time,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// ErrorStmt holds the value of the "error_stmt" field.
	ErrorStmt string `json:"error_stmt,omitempty"`
	// Hash holds the value of the "hash" field.
	Hash string `json:"hash,omitempty"`
	// PartialHashes holds the value of the "partial_hashes" field.
	PartialHashes *schema.PartialHashes `json:"partial_hashes,omitempty"`
	// OperatorVersion holds the value of the "operator_version" field.
	OperatorVersion string `json:"operator_version,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AtlasSchemaRevision) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case atlasschemarevision.FieldPartialHashes:
			values[i] = new([]byte)
		case atlasschemarevision.FieldType, atlasschemarevision.FieldApplied, atlasschemarevision.FieldTotal, atlasschemarevision.FieldExecutionTime:
			values[i] = new(sql.NullInt64)
		case atlasschemarevision.FieldID, atlasschemarevision.FieldDescription, atlasschemarevision.FieldError, atlasschemarevision.FieldErrorStmt, atlasschemarevision.FieldHash, atlasschemarevision.FieldOperatorVersion:
			values[i] = new(sql.NullString)
		case atlasschemarevision.FieldExecutedAt:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type AtlasSchemaRevision", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AtlasSchemaRevision fields.
func (asr *AtlasSchemaRevision) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case atlasschemarevision.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				asr.ID = value.String
			}
		case atlasschemarevision.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				asr.Description = value.String
			}
		case atlasschemarevision.FieldType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				asr.Type = uint64(value.Int64)
			}
		case atlasschemarevision.FieldApplied:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field applied", values[i])
			} else if value.Valid {
				asr.Applied = int(value.Int64)
			}
		case atlasschemarevision.FieldTotal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field total", values[i])
			} else if value.Valid {
				asr.Total = int(value.Int64)
			}
		case atlasschemarevision.FieldExecutedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field executed_at", values[i])
			} else if value.Valid {
				asr.ExecutedAt = value.Time
			}
		case atlasschemarevision.FieldExecutionTime:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field execution_time", values[i])
			} else if value.Valid {
				asr.ExecutionTime = int(value.Int64)
			}
		case atlasschemarevision.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				asr.Error = value.String
			}
		case atlasschemarevision.FieldErrorStmt:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error_stmt", values[i])
			} else if value.Valid {
				asr.ErrorStmt = value.String
			}
		case atlasschemarevision.FieldHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hash", values[i])
			} else if value.Valid {
				asr.Hash = value.String
			}
		case atlasschemarevision.FieldPartialHashes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field partial_hashes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &asr.PartialHashes); err != nil {
					return fmt.Errorf("unmarshal field partial_hashes: %w", err)
				}
			}
		case atlasschemarevision.FieldOperatorVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operator_version", values[i])
			} else if value.Valid {
				asr.OperatorVersion = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this AtlasSchemaRevision.
// Note that you need to call AtlasSchemaRevision.Unwrap() before calling this method if this AtlasSchemaRevision
// was returned from a transaction, and the transaction was committed or rolled back.
func (asr *AtlasSchemaRevision) Update() *AtlasSchemaRevisionUpdateOne {
	return (&AtlasSchemaRevisionClient{config: asr.config}).UpdateOne(asr)
}

// Unwrap unwraps the AtlasSchemaRevision entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (asr *AtlasSchemaRevision) Unwrap() *AtlasSchemaRevision {
	_tx, ok := asr.config.driver.(*txDriver)
	if !ok {
		panic("ent: AtlasSchemaRevision is not a transactional entity")
	}
	asr.config.driver = _tx.drv
	return asr
}

// String implements the fmt.Stringer.
func (asr *AtlasSchemaRevision) String() string {
	var builder strings.Builder
	builder.WriteString("AtlasSchemaRevision(")
	builder.WriteString(fmt.Sprintf("id=%v, ", asr.ID))
	builder.WriteString("description=")
	builder.WriteString(asr.Description)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", asr.Type))
	builder.WriteString(", ")
	builder.WriteString("applied=")
	builder.WriteString(fmt.Sprintf("%v", asr.Applied))
	builder.WriteString(", ")
	builder.WriteString("total=")
	builder.WriteString(fmt.Sprintf("%v", asr.Total))
	builder.WriteString(", ")
	builder.WriteString("executed_at=")
	builder.WriteString(asr.ExecutedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("execution_time=")
	builder.WriteString(fmt.Sprintf("%v", asr.ExecutionTime))
	builder.WriteString(", ")
	builder.WriteString("error=")
	builder.WriteString(asr.Error)
	builder.WriteString(", ")
	builder.WriteString("error_stmt=")
	builder.WriteString(asr.ErrorStmt)
	builder.WriteString(", ")
	builder.WriteString("hash=")
	builder.WriteString(asr.Hash)
	builder.WriteString(", ")
	builder.WriteString("partial_hashes=")
	builder.WriteString(fmt.Sprintf("%v", asr.PartialHashes))
	builder.WriteString(", ")
	builder.WriteString("operator_version=")
	builder.WriteString(asr.OperatorVersion)
	builder.WriteByte(')')
	return builder.String()
}

// AtlasSchemaRevisions is a parsable slice of AtlasSchemaRevision.
type AtlasSchemaRevisions []*AtlasSchemaRevision

func (asr AtlasSchemaRevisions) config(cfg config) {
	for _i := range asr {
		asr[_i].config = cfg
	}
}
