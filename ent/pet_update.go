// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/pet"
	"myapp/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PetUpdate is the builder for updating Pet entities.
type PetUpdate struct {
	config
	hooks     []Hook
	mutation  *PetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PetUpdate builder.
func (pu *PetUpdate) Where(ps ...predicate.Pet) *PetUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetVersions sets the "versions" field.
func (pu *PetUpdate) SetVersions(i int64) *PetUpdate {
	pu.mutation.ResetVersions()
	pu.mutation.SetVersions(i)
	return pu
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (pu *PetUpdate) SetNillableVersions(i *int64) *PetUpdate {
	if i != nil {
		pu.SetVersions(*i)
	}
	return pu
}

// AddVersions adds i to the "versions" field.
func (pu *PetUpdate) AddVersions(i int64) *PetUpdate {
	pu.mutation.AddVersions(i)
	return pu
}

// SetCreatedBy sets the "created_by" field.
func (pu *PetUpdate) SetCreatedBy(s string) *PetUpdate {
	pu.mutation.SetCreatedBy(s)
	return pu
}

// SetUpdatedBy sets the "updated_by" field.
func (pu *PetUpdate) SetUpdatedBy(s string) *PetUpdate {
	pu.mutation.SetUpdatedBy(s)
	return pu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pu *PetUpdate) SetNillableUpdatedBy(s *string) *PetUpdate {
	if s != nil {
		pu.SetUpdatedBy(*s)
	}
	return pu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pu *PetUpdate) ClearUpdatedBy() *PetUpdate {
	pu.mutation.ClearUpdatedBy()
	return pu
}

// SetUpdatedAt sets the "updated_at" field.
func (pu *PetUpdate) SetUpdatedAt(t time.Time) *PetUpdate {
	pu.mutation.SetUpdatedAt(t)
	return pu
}

// SetDeletedBy sets the "deleted_by" field.
func (pu *PetUpdate) SetDeletedBy(s string) *PetUpdate {
	pu.mutation.SetDeletedBy(s)
	return pu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pu *PetUpdate) SetNillableDeletedBy(s *string) *PetUpdate {
	if s != nil {
		pu.SetDeletedBy(*s)
	}
	return pu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pu *PetUpdate) ClearDeletedBy() *PetUpdate {
	pu.mutation.ClearDeletedBy()
	return pu
}

// SetDeletedAt sets the "deleted_at" field.
func (pu *PetUpdate) SetDeletedAt(t time.Time) *PetUpdate {
	pu.mutation.SetDeletedAt(t)
	return pu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pu *PetUpdate) SetNillableDeletedAt(t *time.Time) *PetUpdate {
	if t != nil {
		pu.SetDeletedAt(*t)
	}
	return pu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pu *PetUpdate) ClearDeletedAt() *PetUpdate {
	pu.mutation.ClearDeletedAt()
	return pu
}

// SetName sets the "name" field.
func (pu *PetUpdate) SetName(s string) *PetUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetType sets the "type" field.
func (pu *PetUpdate) SetType(pe pet.Type) *PetUpdate {
	pu.mutation.SetType(pe)
	return pu
}

// SetCode sets the "code" field.
func (pu *PetUpdate) SetCode(s string) *PetUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetAgeMonth sets the "age_month" field.
func (pu *PetUpdate) SetAgeMonth(i int) *PetUpdate {
	pu.mutation.ResetAgeMonth()
	pu.mutation.SetAgeMonth(i)
	return pu
}

// AddAgeMonth adds i to the "age_month" field.
func (pu *PetUpdate) AddAgeMonth(i int) *PetUpdate {
	pu.mutation.AddAgeMonth(i)
	return pu
}

// Mutation returns the PetMutation object of the builder.
func (pu *PetUpdate) Mutation() *PetMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PetUpdate) Save(ctx context.Context) (int, error) {
	pu.defaults()
	return withHooks(ctx, pu.sqlSave, pu.mutation, pu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PetUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PetUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PetUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pu *PetUpdate) defaults() {
	if _, ok := pu.mutation.UpdatedAt(); !ok {
		v := pet.UpdateDefaultUpdatedAt()
		pu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PetUpdate) check() error {
	if v, ok := pu.mutation.CreatedBy(); ok {
		if err := pet.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Pet.created_by": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pet.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.GetType(); ok {
		if err := pet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pet.type": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Code(); ok {
		if err := pet.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Pet.code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.AgeMonth(); ok {
		if err := pet.AgeMonthValidator(v); err != nil {
			return &ValidationError{Name: "age_month", err: fmt.Errorf(`ent: validator failed for field "Pet.age_month": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pu *PetUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PetUpdate {
	pu.modifiers = append(pu.modifiers, modifiers...)
	return pu
}

func (pu *PetUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Versions(); ok {
		_spec.SetField(pet.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.AddedVersions(); ok {
		_spec.AddField(pet.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := pu.mutation.CreatedBy(); ok {
		_spec.SetField(pet.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := pu.mutation.UpdatedBy(); ok {
		_spec.SetField(pet.FieldUpdatedBy, field.TypeString, value)
	}
	if pu.mutation.UpdatedByCleared() {
		_spec.ClearField(pet.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pu.mutation.UpdatedAt(); ok {
		_spec.SetField(pet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := pu.mutation.DeletedBy(); ok {
		_spec.SetField(pet.FieldDeletedBy, field.TypeString, value)
	}
	if pu.mutation.DeletedByCleared() {
		_spec.ClearField(pet.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pu.mutation.DeletedAt(); ok {
		_spec.SetField(pet.FieldDeletedAt, field.TypeTime, value)
	}
	if pu.mutation.DeletedAtCleared() {
		_spec.ClearField(pet.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.SetField(pet.FieldType, field.TypeEnum, value)
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.SetField(pet.FieldCode, field.TypeString, value)
	}
	if value, ok := pu.mutation.AgeMonth(); ok {
		_spec.SetField(pet.FieldAgeMonth, field.TypeInt, value)
	}
	if value, ok := pu.mutation.AddedAgeMonth(); ok {
		_spec.AddField(pet.FieldAgeMonth, field.TypeInt, value)
	}
	_spec.AddModifiers(pu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pu.mutation.done = true
	return n, nil
}

// PetUpdateOne is the builder for updating a single Pet entity.
type PetUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PetMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVersions sets the "versions" field.
func (puo *PetUpdateOne) SetVersions(i int64) *PetUpdateOne {
	puo.mutation.ResetVersions()
	puo.mutation.SetVersions(i)
	return puo
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableVersions(i *int64) *PetUpdateOne {
	if i != nil {
		puo.SetVersions(*i)
	}
	return puo
}

// AddVersions adds i to the "versions" field.
func (puo *PetUpdateOne) AddVersions(i int64) *PetUpdateOne {
	puo.mutation.AddVersions(i)
	return puo
}

// SetCreatedBy sets the "created_by" field.
func (puo *PetUpdateOne) SetCreatedBy(s string) *PetUpdateOne {
	puo.mutation.SetCreatedBy(s)
	return puo
}

// SetUpdatedBy sets the "updated_by" field.
func (puo *PetUpdateOne) SetUpdatedBy(s string) *PetUpdateOne {
	puo.mutation.SetUpdatedBy(s)
	return puo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableUpdatedBy(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetUpdatedBy(*s)
	}
	return puo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (puo *PetUpdateOne) ClearUpdatedBy() *PetUpdateOne {
	puo.mutation.ClearUpdatedBy()
	return puo
}

// SetUpdatedAt sets the "updated_at" field.
func (puo *PetUpdateOne) SetUpdatedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetUpdatedAt(t)
	return puo
}

// SetDeletedBy sets the "deleted_by" field.
func (puo *PetUpdateOne) SetDeletedBy(s string) *PetUpdateOne {
	puo.mutation.SetDeletedBy(s)
	return puo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableDeletedBy(s *string) *PetUpdateOne {
	if s != nil {
		puo.SetDeletedBy(*s)
	}
	return puo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (puo *PetUpdateOne) ClearDeletedBy() *PetUpdateOne {
	puo.mutation.ClearDeletedBy()
	return puo
}

// SetDeletedAt sets the "deleted_at" field.
func (puo *PetUpdateOne) SetDeletedAt(t time.Time) *PetUpdateOne {
	puo.mutation.SetDeletedAt(t)
	return puo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (puo *PetUpdateOne) SetNillableDeletedAt(t *time.Time) *PetUpdateOne {
	if t != nil {
		puo.SetDeletedAt(*t)
	}
	return puo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (puo *PetUpdateOne) ClearDeletedAt() *PetUpdateOne {
	puo.mutation.ClearDeletedAt()
	return puo
}

// SetName sets the "name" field.
func (puo *PetUpdateOne) SetName(s string) *PetUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetType sets the "type" field.
func (puo *PetUpdateOne) SetType(pe pet.Type) *PetUpdateOne {
	puo.mutation.SetType(pe)
	return puo
}

// SetCode sets the "code" field.
func (puo *PetUpdateOne) SetCode(s string) *PetUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetAgeMonth sets the "age_month" field.
func (puo *PetUpdateOne) SetAgeMonth(i int) *PetUpdateOne {
	puo.mutation.ResetAgeMonth()
	puo.mutation.SetAgeMonth(i)
	return puo
}

// AddAgeMonth adds i to the "age_month" field.
func (puo *PetUpdateOne) AddAgeMonth(i int) *PetUpdateOne {
	puo.mutation.AddAgeMonth(i)
	return puo
}

// Mutation returns the PetMutation object of the builder.
func (puo *PetUpdateOne) Mutation() *PetMutation {
	return puo.mutation
}

// Where appends a list predicates to the PetUpdate builder.
func (puo *PetUpdateOne) Where(ps ...predicate.Pet) *PetUpdateOne {
	puo.mutation.Where(ps...)
	return puo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PetUpdateOne) Select(field string, fields ...string) *PetUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Pet entity.
func (puo *PetUpdateOne) Save(ctx context.Context) (*Pet, error) {
	puo.defaults()
	return withHooks(ctx, puo.sqlSave, puo.mutation, puo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PetUpdateOne) SaveX(ctx context.Context) *Pet {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PetUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PetUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puo *PetUpdateOne) defaults() {
	if _, ok := puo.mutation.UpdatedAt(); !ok {
		v := pet.UpdateDefaultUpdatedAt()
		puo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PetUpdateOne) check() error {
	if v, ok := puo.mutation.CreatedBy(); ok {
		if err := pet.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Pet.created_by": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Name(); ok {
		if err := pet.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Pet.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.GetType(); ok {
		if err := pet.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Pet.type": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Code(); ok {
		if err := pet.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: validator failed for field "Pet.code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.AgeMonth(); ok {
		if err := pet.AgeMonthValidator(v); err != nil {
			return &ValidationError{Name: "age_month", err: fmt.Errorf(`ent: validator failed for field "Pet.age_month": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (puo *PetUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PetUpdateOne {
	puo.modifiers = append(puo.modifiers, modifiers...)
	return puo
}

func (puo *PetUpdateOne) sqlSave(ctx context.Context) (_node *Pet, err error) {
	if err := puo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(pet.Table, pet.Columns, sqlgraph.NewFieldSpec(pet.FieldID, field.TypeUUID))
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Pet.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pet.FieldID)
		for _, f := range fields {
			if !pet.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != pet.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Versions(); ok {
		_spec.SetField(pet.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.AddedVersions(); ok {
		_spec.AddField(pet.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := puo.mutation.CreatedBy(); ok {
		_spec.SetField(pet.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := puo.mutation.UpdatedBy(); ok {
		_spec.SetField(pet.FieldUpdatedBy, field.TypeString, value)
	}
	if puo.mutation.UpdatedByCleared() {
		_spec.ClearField(pet.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := puo.mutation.UpdatedAt(); ok {
		_spec.SetField(pet.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := puo.mutation.DeletedBy(); ok {
		_spec.SetField(pet.FieldDeletedBy, field.TypeString, value)
	}
	if puo.mutation.DeletedByCleared() {
		_spec.ClearField(pet.FieldDeletedBy, field.TypeString)
	}
	if value, ok := puo.mutation.DeletedAt(); ok {
		_spec.SetField(pet.FieldDeletedAt, field.TypeTime, value)
	}
	if puo.mutation.DeletedAtCleared() {
		_spec.ClearField(pet.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.SetField(pet.FieldName, field.TypeString, value)
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.SetField(pet.FieldType, field.TypeEnum, value)
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.SetField(pet.FieldCode, field.TypeString, value)
	}
	if value, ok := puo.mutation.AgeMonth(); ok {
		_spec.SetField(pet.FieldAgeMonth, field.TypeInt, value)
	}
	if value, ok := puo.mutation.AddedAgeMonth(); ok {
		_spec.AddField(pet.FieldAgeMonth, field.TypeInt, value)
	}
	_spec.AddModifiers(puo.modifiers...)
	_node = &Pet{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pet.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	puo.mutation.done = true
	return _node, nil
}
