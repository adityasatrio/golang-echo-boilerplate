// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"
	"myapp/ent/atlasschemarevision"
	"myapp/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AtlasSchemaRevisionQuery is the builder for querying AtlasSchemaRevision entities.
type AtlasSchemaRevisionQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.AtlasSchemaRevision
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the AtlasSchemaRevisionQuery builder.
func (asrq *AtlasSchemaRevisionQuery) Where(ps ...predicate.AtlasSchemaRevision) *AtlasSchemaRevisionQuery {
	asrq.predicates = append(asrq.predicates, ps...)
	return asrq
}

// Limit adds a limit step to the query.
func (asrq *AtlasSchemaRevisionQuery) Limit(limit int) *AtlasSchemaRevisionQuery {
	asrq.limit = &limit
	return asrq
}

// Offset adds an offset step to the query.
func (asrq *AtlasSchemaRevisionQuery) Offset(offset int) *AtlasSchemaRevisionQuery {
	asrq.offset = &offset
	return asrq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (asrq *AtlasSchemaRevisionQuery) Unique(unique bool) *AtlasSchemaRevisionQuery {
	asrq.unique = &unique
	return asrq
}

// Order adds an order step to the query.
func (asrq *AtlasSchemaRevisionQuery) Order(o ...OrderFunc) *AtlasSchemaRevisionQuery {
	asrq.order = append(asrq.order, o...)
	return asrq
}

// First returns the first AtlasSchemaRevision entity from the query.
// Returns a *NotFoundError when no AtlasSchemaRevision was found.
func (asrq *AtlasSchemaRevisionQuery) First(ctx context.Context) (*AtlasSchemaRevision, error) {
	nodes, err := asrq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{atlasschemarevision.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) FirstX(ctx context.Context) *AtlasSchemaRevision {
	node, err := asrq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first AtlasSchemaRevision ID from the query.
// Returns a *NotFoundError when no AtlasSchemaRevision ID was found.
func (asrq *AtlasSchemaRevisionQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = asrq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{atlasschemarevision.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) FirstIDX(ctx context.Context) string {
	id, err := asrq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single AtlasSchemaRevision entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one AtlasSchemaRevision entity is found.
// Returns a *NotFoundError when no AtlasSchemaRevision entities are found.
func (asrq *AtlasSchemaRevisionQuery) Only(ctx context.Context) (*AtlasSchemaRevision, error) {
	nodes, err := asrq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{atlasschemarevision.Label}
	default:
		return nil, &NotSingularError{atlasschemarevision.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) OnlyX(ctx context.Context) *AtlasSchemaRevision {
	node, err := asrq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only AtlasSchemaRevision ID in the query.
// Returns a *NotSingularError when more than one AtlasSchemaRevision ID is found.
// Returns a *NotFoundError when no entities are found.
func (asrq *AtlasSchemaRevisionQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = asrq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{atlasschemarevision.Label}
	default:
		err = &NotSingularError{atlasschemarevision.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) OnlyIDX(ctx context.Context) string {
	id, err := asrq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of AtlasSchemaRevisions.
func (asrq *AtlasSchemaRevisionQuery) All(ctx context.Context) ([]*AtlasSchemaRevision, error) {
	if err := asrq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return asrq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) AllX(ctx context.Context) []*AtlasSchemaRevision {
	nodes, err := asrq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of AtlasSchemaRevision IDs.
func (asrq *AtlasSchemaRevisionQuery) IDs(ctx context.Context) ([]string, error) {
	var ids []string
	if err := asrq.Select(atlasschemarevision.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) IDsX(ctx context.Context) []string {
	ids, err := asrq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (asrq *AtlasSchemaRevisionQuery) Count(ctx context.Context) (int, error) {
	if err := asrq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return asrq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) CountX(ctx context.Context) int {
	count, err := asrq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (asrq *AtlasSchemaRevisionQuery) Exist(ctx context.Context) (bool, error) {
	if err := asrq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return asrq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (asrq *AtlasSchemaRevisionQuery) ExistX(ctx context.Context) bool {
	exist, err := asrq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the AtlasSchemaRevisionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (asrq *AtlasSchemaRevisionQuery) Clone() *AtlasSchemaRevisionQuery {
	if asrq == nil {
		return nil
	}
	return &AtlasSchemaRevisionQuery{
		config:     asrq.config,
		limit:      asrq.limit,
		offset:     asrq.offset,
		order:      append([]OrderFunc{}, asrq.order...),
		predicates: append([]predicate.AtlasSchemaRevision{}, asrq.predicates...),
		// clone intermediate query.
		sql:    asrq.sql.Clone(),
		path:   asrq.path,
		unique: asrq.unique,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.AtlasSchemaRevision.Query().
//		GroupBy(atlasschemarevision.FieldDescription).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (asrq *AtlasSchemaRevisionQuery) GroupBy(field string, fields ...string) *AtlasSchemaRevisionGroupBy {
	grbuild := &AtlasSchemaRevisionGroupBy{config: asrq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := asrq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return asrq.sqlQuery(ctx), nil
	}
	grbuild.label = atlasschemarevision.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		Description string `json:"description,omitempty"`
//	}
//
//	client.AtlasSchemaRevision.Query().
//		Select(atlasschemarevision.FieldDescription).
//		Scan(ctx, &v)
func (asrq *AtlasSchemaRevisionQuery) Select(fields ...string) *AtlasSchemaRevisionSelect {
	asrq.fields = append(asrq.fields, fields...)
	selbuild := &AtlasSchemaRevisionSelect{AtlasSchemaRevisionQuery: asrq}
	selbuild.label = atlasschemarevision.Label
	selbuild.flds, selbuild.scan = &asrq.fields, selbuild.Scan
	return selbuild
}

// Aggregate returns a AtlasSchemaRevisionSelect configured with the given aggregations.
func (asrq *AtlasSchemaRevisionQuery) Aggregate(fns ...AggregateFunc) *AtlasSchemaRevisionSelect {
	return asrq.Select().Aggregate(fns...)
}

func (asrq *AtlasSchemaRevisionQuery) prepareQuery(ctx context.Context) error {
	for _, f := range asrq.fields {
		if !atlasschemarevision.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if asrq.path != nil {
		prev, err := asrq.path(ctx)
		if err != nil {
			return err
		}
		asrq.sql = prev
	}
	return nil
}

func (asrq *AtlasSchemaRevisionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*AtlasSchemaRevision, error) {
	var (
		nodes = []*AtlasSchemaRevision{}
		_spec = asrq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*AtlasSchemaRevision).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &AtlasSchemaRevision{config: asrq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, asrq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	return nodes, nil
}

func (asrq *AtlasSchemaRevisionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := asrq.querySpec()
	_spec.Node.Columns = asrq.fields
	if len(asrq.fields) > 0 {
		_spec.Unique = asrq.unique != nil && *asrq.unique
	}
	return sqlgraph.CountNodes(ctx, asrq.driver, _spec)
}

func (asrq *AtlasSchemaRevisionQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := asrq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (asrq *AtlasSchemaRevisionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   atlasschemarevision.Table,
			Columns: atlasschemarevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: atlasschemarevision.FieldID,
			},
		},
		From:   asrq.sql,
		Unique: true,
	}
	if unique := asrq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := asrq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, atlasschemarevision.FieldID)
		for i := range fields {
			if fields[i] != atlasschemarevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := asrq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := asrq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := asrq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := asrq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (asrq *AtlasSchemaRevisionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(asrq.driver.Dialect())
	t1 := builder.Table(atlasschemarevision.Table)
	columns := asrq.fields
	if len(columns) == 0 {
		columns = atlasschemarevision.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if asrq.sql != nil {
		selector = asrq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if asrq.unique != nil && *asrq.unique {
		selector.Distinct()
	}
	for _, p := range asrq.predicates {
		p(selector)
	}
	for _, p := range asrq.order {
		p(selector)
	}
	if offset := asrq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := asrq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// AtlasSchemaRevisionGroupBy is the group-by builder for AtlasSchemaRevision entities.
type AtlasSchemaRevisionGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (asrgb *AtlasSchemaRevisionGroupBy) Aggregate(fns ...AggregateFunc) *AtlasSchemaRevisionGroupBy {
	asrgb.fns = append(asrgb.fns, fns...)
	return asrgb
}

// Scan applies the group-by query and scans the result into the given value.
func (asrgb *AtlasSchemaRevisionGroupBy) Scan(ctx context.Context, v any) error {
	query, err := asrgb.path(ctx)
	if err != nil {
		return err
	}
	asrgb.sql = query
	return asrgb.sqlScan(ctx, v)
}

func (asrgb *AtlasSchemaRevisionGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range asrgb.fields {
		if !atlasschemarevision.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := asrgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := asrgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (asrgb *AtlasSchemaRevisionGroupBy) sqlQuery() *sql.Selector {
	selector := asrgb.sql.Select()
	aggregation := make([]string, 0, len(asrgb.fns))
	for _, fn := range asrgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(asrgb.fields)+len(asrgb.fns))
		for _, f := range asrgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(asrgb.fields...)...)
}

// AtlasSchemaRevisionSelect is the builder for selecting fields of AtlasSchemaRevision entities.
type AtlasSchemaRevisionSelect struct {
	*AtlasSchemaRevisionQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (asrs *AtlasSchemaRevisionSelect) Aggregate(fns ...AggregateFunc) *AtlasSchemaRevisionSelect {
	asrs.fns = append(asrs.fns, fns...)
	return asrs
}

// Scan applies the selector query and scans the result into the given value.
func (asrs *AtlasSchemaRevisionSelect) Scan(ctx context.Context, v any) error {
	if err := asrs.prepareQuery(ctx); err != nil {
		return err
	}
	asrs.sql = asrs.AtlasSchemaRevisionQuery.sqlQuery(ctx)
	return asrs.sqlScan(ctx, v)
}

func (asrs *AtlasSchemaRevisionSelect) sqlScan(ctx context.Context, v any) error {
	aggregation := make([]string, 0, len(asrs.fns))
	for _, fn := range asrs.fns {
		aggregation = append(aggregation, fn(asrs.sql))
	}
	switch n := len(*asrs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		asrs.sql.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		asrs.sql.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := asrs.sql.Query()
	if err := asrs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
