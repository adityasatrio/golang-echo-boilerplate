// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/predicate"
	"myapp/ent/userdevice"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDeviceUpdate is the builder for updating UserDevice entities.
type UserDeviceUpdate struct {
	config
	hooks    []Hook
	mutation *UserDeviceMutation
}

// Where appends a list predicates to the UserDeviceUpdate builder.
func (udu *UserDeviceUpdate) Where(ps ...predicate.UserDevice) *UserDeviceUpdate {
	udu.mutation.Where(ps...)
	return udu
}

// SetVersion sets the "version" field.
func (udu *UserDeviceUpdate) SetVersion(i int64) *UserDeviceUpdate {
	udu.mutation.ResetVersion()
	udu.mutation.SetVersion(i)
	return udu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableVersion(i *int64) *UserDeviceUpdate {
	if i != nil {
		udu.SetVersion(*i)
	}
	return udu
}

// AddVersion adds i to the "version" field.
func (udu *UserDeviceUpdate) AddVersion(i int64) *UserDeviceUpdate {
	udu.mutation.AddVersion(i)
	return udu
}

// SetCreatedBy sets the "created_by" field.
func (udu *UserDeviceUpdate) SetCreatedBy(s string) *UserDeviceUpdate {
	udu.mutation.SetCreatedBy(s)
	return udu
}

// SetUpdatedBy sets the "updated_by" field.
func (udu *UserDeviceUpdate) SetUpdatedBy(s string) *UserDeviceUpdate {
	udu.mutation.SetUpdatedBy(s)
	return udu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableUpdatedBy(s *string) *UserDeviceUpdate {
	if s != nil {
		udu.SetUpdatedBy(*s)
	}
	return udu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (udu *UserDeviceUpdate) ClearUpdatedBy() *UserDeviceUpdate {
	udu.mutation.ClearUpdatedBy()
	return udu
}

// SetUpdatedAt sets the "updated_at" field.
func (udu *UserDeviceUpdate) SetUpdatedAt(t time.Time) *UserDeviceUpdate {
	udu.mutation.SetUpdatedAt(t)
	return udu
}

// SetDeletedBy sets the "deleted_by" field.
func (udu *UserDeviceUpdate) SetDeletedBy(s string) *UserDeviceUpdate {
	udu.mutation.SetDeletedBy(s)
	return udu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableDeletedBy(s *string) *UserDeviceUpdate {
	if s != nil {
		udu.SetDeletedBy(*s)
	}
	return udu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (udu *UserDeviceUpdate) ClearDeletedBy() *UserDeviceUpdate {
	udu.mutation.ClearDeletedBy()
	return udu
}

// SetDeletedAt sets the "deleted_at" field.
func (udu *UserDeviceUpdate) SetDeletedAt(t time.Time) *UserDeviceUpdate {
	udu.mutation.SetDeletedAt(t)
	return udu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableDeletedAt(t *time.Time) *UserDeviceUpdate {
	if t != nil {
		udu.SetDeletedAt(*t)
	}
	return udu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (udu *UserDeviceUpdate) ClearDeletedAt() *UserDeviceUpdate {
	udu.mutation.ClearDeletedAt()
	return udu
}

// SetUserID sets the "user_id" field.
func (udu *UserDeviceUpdate) SetUserID(u uint64) *UserDeviceUpdate {
	udu.mutation.ResetUserID()
	udu.mutation.SetUserID(u)
	return udu
}

// AddUserID adds u to the "user_id" field.
func (udu *UserDeviceUpdate) AddUserID(u int64) *UserDeviceUpdate {
	udu.mutation.AddUserID(u)
	return udu
}

// SetAppVersion sets the "app_version" field.
func (udu *UserDeviceUpdate) SetAppVersion(s string) *UserDeviceUpdate {
	udu.mutation.SetAppVersion(s)
	return udu
}

// SetPlatform sets the "platform" field.
func (udu *UserDeviceUpdate) SetPlatform(s string) *UserDeviceUpdate {
	udu.mutation.SetPlatform(s)
	return udu
}

// SetDeviceID sets the "device_id" field.
func (udu *UserDeviceUpdate) SetDeviceID(s string) *UserDeviceUpdate {
	udu.mutation.SetDeviceID(s)
	return udu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (udu *UserDeviceUpdate) SetNillableDeviceID(s *string) *UserDeviceUpdate {
	if s != nil {
		udu.SetDeviceID(*s)
	}
	return udu
}

// ClearDeviceID clears the value of the "device_id" field.
func (udu *UserDeviceUpdate) ClearDeviceID() *UserDeviceUpdate {
	udu.mutation.ClearDeviceID()
	return udu
}

// Mutation returns the UserDeviceMutation object of the builder.
func (udu *UserDeviceUpdate) Mutation() *UserDeviceMutation {
	return udu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (udu *UserDeviceUpdate) Save(ctx context.Context) (int, error) {
	udu.defaults()
	return withHooks(ctx, udu.sqlSave, udu.mutation, udu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (udu *UserDeviceUpdate) SaveX(ctx context.Context) int {
	affected, err := udu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (udu *UserDeviceUpdate) Exec(ctx context.Context) error {
	_, err := udu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udu *UserDeviceUpdate) ExecX(ctx context.Context) {
	if err := udu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udu *UserDeviceUpdate) defaults() {
	if _, ok := udu.mutation.UpdatedAt(); !ok {
		v := userdevice.UpdateDefaultUpdatedAt()
		udu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udu *UserDeviceUpdate) check() error {
	if v, ok := udu.mutation.CreatedBy(); ok {
		if err := userdevice.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "UserDevice.created_by": %w`, err)}
		}
	}
	return nil
}

func (udu *UserDeviceUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := udu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdevice.Table, userdevice.Columns, sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeUint64))
	if ps := udu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := udu.mutation.Version(); ok {
		_spec.SetField(userdevice.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.AddedVersion(); ok {
		_spec.AddField(userdevice.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := udu.mutation.CreatedBy(); ok {
		_spec.SetField(userdevice.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := udu.mutation.UpdatedBy(); ok {
		_spec.SetField(userdevice.FieldUpdatedBy, field.TypeString, value)
	}
	if udu.mutation.UpdatedByCleared() {
		_spec.ClearField(userdevice.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := udu.mutation.UpdatedAt(); ok {
		_spec.SetField(userdevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := udu.mutation.DeletedBy(); ok {
		_spec.SetField(userdevice.FieldDeletedBy, field.TypeString, value)
	}
	if udu.mutation.DeletedByCleared() {
		_spec.ClearField(userdevice.FieldDeletedBy, field.TypeString)
	}
	if value, ok := udu.mutation.DeletedAt(); ok {
		_spec.SetField(userdevice.FieldDeletedAt, field.TypeTime, value)
	}
	if udu.mutation.DeletedAtCleared() {
		_spec.ClearField(userdevice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := udu.mutation.UserID(); ok {
		_spec.SetField(userdevice.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := udu.mutation.AddedUserID(); ok {
		_spec.AddField(userdevice.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := udu.mutation.AppVersion(); ok {
		_spec.SetField(userdevice.FieldAppVersion, field.TypeString, value)
	}
	if value, ok := udu.mutation.Platform(); ok {
		_spec.SetField(userdevice.FieldPlatform, field.TypeString, value)
	}
	if value, ok := udu.mutation.DeviceID(); ok {
		_spec.SetField(userdevice.FieldDeviceID, field.TypeString, value)
	}
	if udu.mutation.DeviceIDCleared() {
		_spec.ClearField(userdevice.FieldDeviceID, field.TypeString)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, udu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	udu.mutation.done = true
	return n, nil
}

// UserDeviceUpdateOne is the builder for updating a single UserDevice entity.
type UserDeviceUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserDeviceMutation
}

// SetVersion sets the "version" field.
func (uduo *UserDeviceUpdateOne) SetVersion(i int64) *UserDeviceUpdateOne {
	uduo.mutation.ResetVersion()
	uduo.mutation.SetVersion(i)
	return uduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableVersion(i *int64) *UserDeviceUpdateOne {
	if i != nil {
		uduo.SetVersion(*i)
	}
	return uduo
}

// AddVersion adds i to the "version" field.
func (uduo *UserDeviceUpdateOne) AddVersion(i int64) *UserDeviceUpdateOne {
	uduo.mutation.AddVersion(i)
	return uduo
}

// SetCreatedBy sets the "created_by" field.
func (uduo *UserDeviceUpdateOne) SetCreatedBy(s string) *UserDeviceUpdateOne {
	uduo.mutation.SetCreatedBy(s)
	return uduo
}

// SetUpdatedBy sets the "updated_by" field.
func (uduo *UserDeviceUpdateOne) SetUpdatedBy(s string) *UserDeviceUpdateOne {
	uduo.mutation.SetUpdatedBy(s)
	return uduo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableUpdatedBy(s *string) *UserDeviceUpdateOne {
	if s != nil {
		uduo.SetUpdatedBy(*s)
	}
	return uduo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uduo *UserDeviceUpdateOne) ClearUpdatedBy() *UserDeviceUpdateOne {
	uduo.mutation.ClearUpdatedBy()
	return uduo
}

// SetUpdatedAt sets the "updated_at" field.
func (uduo *UserDeviceUpdateOne) SetUpdatedAt(t time.Time) *UserDeviceUpdateOne {
	uduo.mutation.SetUpdatedAt(t)
	return uduo
}

// SetDeletedBy sets the "deleted_by" field.
func (uduo *UserDeviceUpdateOne) SetDeletedBy(s string) *UserDeviceUpdateOne {
	uduo.mutation.SetDeletedBy(s)
	return uduo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableDeletedBy(s *string) *UserDeviceUpdateOne {
	if s != nil {
		uduo.SetDeletedBy(*s)
	}
	return uduo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uduo *UserDeviceUpdateOne) ClearDeletedBy() *UserDeviceUpdateOne {
	uduo.mutation.ClearDeletedBy()
	return uduo
}

// SetDeletedAt sets the "deleted_at" field.
func (uduo *UserDeviceUpdateOne) SetDeletedAt(t time.Time) *UserDeviceUpdateOne {
	uduo.mutation.SetDeletedAt(t)
	return uduo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableDeletedAt(t *time.Time) *UserDeviceUpdateOne {
	if t != nil {
		uduo.SetDeletedAt(*t)
	}
	return uduo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uduo *UserDeviceUpdateOne) ClearDeletedAt() *UserDeviceUpdateOne {
	uduo.mutation.ClearDeletedAt()
	return uduo
}

// SetUserID sets the "user_id" field.
func (uduo *UserDeviceUpdateOne) SetUserID(u uint64) *UserDeviceUpdateOne {
	uduo.mutation.ResetUserID()
	uduo.mutation.SetUserID(u)
	return uduo
}

// AddUserID adds u to the "user_id" field.
func (uduo *UserDeviceUpdateOne) AddUserID(u int64) *UserDeviceUpdateOne {
	uduo.mutation.AddUserID(u)
	return uduo
}

// SetAppVersion sets the "app_version" field.
func (uduo *UserDeviceUpdateOne) SetAppVersion(s string) *UserDeviceUpdateOne {
	uduo.mutation.SetAppVersion(s)
	return uduo
}

// SetPlatform sets the "platform" field.
func (uduo *UserDeviceUpdateOne) SetPlatform(s string) *UserDeviceUpdateOne {
	uduo.mutation.SetPlatform(s)
	return uduo
}

// SetDeviceID sets the "device_id" field.
func (uduo *UserDeviceUpdateOne) SetDeviceID(s string) *UserDeviceUpdateOne {
	uduo.mutation.SetDeviceID(s)
	return uduo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (uduo *UserDeviceUpdateOne) SetNillableDeviceID(s *string) *UserDeviceUpdateOne {
	if s != nil {
		uduo.SetDeviceID(*s)
	}
	return uduo
}

// ClearDeviceID clears the value of the "device_id" field.
func (uduo *UserDeviceUpdateOne) ClearDeviceID() *UserDeviceUpdateOne {
	uduo.mutation.ClearDeviceID()
	return uduo
}

// Mutation returns the UserDeviceMutation object of the builder.
func (uduo *UserDeviceUpdateOne) Mutation() *UserDeviceMutation {
	return uduo.mutation
}

// Where appends a list predicates to the UserDeviceUpdate builder.
func (uduo *UserDeviceUpdateOne) Where(ps ...predicate.UserDevice) *UserDeviceUpdateOne {
	uduo.mutation.Where(ps...)
	return uduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uduo *UserDeviceUpdateOne) Select(field string, fields ...string) *UserDeviceUpdateOne {
	uduo.fields = append([]string{field}, fields...)
	return uduo
}

// Save executes the query and returns the updated UserDevice entity.
func (uduo *UserDeviceUpdateOne) Save(ctx context.Context) (*UserDevice, error) {
	uduo.defaults()
	return withHooks(ctx, uduo.sqlSave, uduo.mutation, uduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uduo *UserDeviceUpdateOne) SaveX(ctx context.Context) *UserDevice {
	node, err := uduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uduo *UserDeviceUpdateOne) Exec(ctx context.Context) error {
	_, err := uduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uduo *UserDeviceUpdateOne) ExecX(ctx context.Context) {
	if err := uduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uduo *UserDeviceUpdateOne) defaults() {
	if _, ok := uduo.mutation.UpdatedAt(); !ok {
		v := userdevice.UpdateDefaultUpdatedAt()
		uduo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (uduo *UserDeviceUpdateOne) check() error {
	if v, ok := uduo.mutation.CreatedBy(); ok {
		if err := userdevice.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "UserDevice.created_by": %w`, err)}
		}
	}
	return nil
}

func (uduo *UserDeviceUpdateOne) sqlSave(ctx context.Context) (_node *UserDevice, err error) {
	if err := uduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(userdevice.Table, userdevice.Columns, sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeUint64))
	id, ok := uduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "UserDevice.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, userdevice.FieldID)
		for _, f := range fields {
			if !userdevice.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != userdevice.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := uduo.mutation.Version(); ok {
		_spec.SetField(userdevice.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.AddedVersion(); ok {
		_spec.AddField(userdevice.FieldVersion, field.TypeInt64, value)
	}
	if value, ok := uduo.mutation.CreatedBy(); ok {
		_spec.SetField(userdevice.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := uduo.mutation.UpdatedBy(); ok {
		_spec.SetField(userdevice.FieldUpdatedBy, field.TypeString, value)
	}
	if uduo.mutation.UpdatedByCleared() {
		_spec.ClearField(userdevice.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uduo.mutation.UpdatedAt(); ok {
		_spec.SetField(userdevice.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := uduo.mutation.DeletedBy(); ok {
		_spec.SetField(userdevice.FieldDeletedBy, field.TypeString, value)
	}
	if uduo.mutation.DeletedByCleared() {
		_spec.ClearField(userdevice.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uduo.mutation.DeletedAt(); ok {
		_spec.SetField(userdevice.FieldDeletedAt, field.TypeTime, value)
	}
	if uduo.mutation.DeletedAtCleared() {
		_spec.ClearField(userdevice.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uduo.mutation.UserID(); ok {
		_spec.SetField(userdevice.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := uduo.mutation.AddedUserID(); ok {
		_spec.AddField(userdevice.FieldUserID, field.TypeUint64, value)
	}
	if value, ok := uduo.mutation.AppVersion(); ok {
		_spec.SetField(userdevice.FieldAppVersion, field.TypeString, value)
	}
	if value, ok := uduo.mutation.Platform(); ok {
		_spec.SetField(userdevice.FieldPlatform, field.TypeString, value)
	}
	if value, ok := uduo.mutation.DeviceID(); ok {
		_spec.SetField(userdevice.FieldDeviceID, field.TypeString, value)
	}
	if uduo.mutation.DeviceIDCleared() {
		_spec.ClearField(userdevice.FieldDeviceID, field.TypeString)
	}
	_node = &UserDevice{config: uduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{userdevice.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uduo.mutation.done = true
	return _node, nil
}
