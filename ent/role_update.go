// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/predicate"
	"myapp/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RoleUpdate builder.
func (ru *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetVersions sets the "versions" field.
func (ru *RoleUpdate) SetVersions(i int64) *RoleUpdate {
	ru.mutation.ResetVersions()
	ru.mutation.SetVersions(i)
	return ru
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableVersions(i *int64) *RoleUpdate {
	if i != nil {
		ru.SetVersions(*i)
	}
	return ru
}

// AddVersions adds i to the "versions" field.
func (ru *RoleUpdate) AddVersions(i int64) *RoleUpdate {
	ru.mutation.AddVersions(i)
	return ru
}

// SetCreatedBy sets the "created_by" field.
func (ru *RoleUpdate) SetCreatedBy(s string) *RoleUpdate {
	ru.mutation.SetCreatedBy(s)
	return ru
}

// SetUpdatedBy sets the "updated_by" field.
func (ru *RoleUpdate) SetUpdatedBy(s string) *RoleUpdate {
	ru.mutation.SetUpdatedBy(s)
	return ru
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableUpdatedBy(s *string) *RoleUpdate {
	if s != nil {
		ru.SetUpdatedBy(*s)
	}
	return ru
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ru *RoleUpdate) ClearUpdatedBy() *RoleUpdate {
	ru.mutation.ClearUpdatedBy()
	return ru
}

// SetUpdatedAt sets the "updated_at" field.
func (ru *RoleUpdate) SetUpdatedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetUpdatedAt(t)
	return ru
}

// SetDeletedBy sets the "deleted_by" field.
func (ru *RoleUpdate) SetDeletedBy(s string) *RoleUpdate {
	ru.mutation.SetDeletedBy(s)
	return ru
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDeletedBy(s *string) *RoleUpdate {
	if s != nil {
		ru.SetDeletedBy(*s)
	}
	return ru
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ru *RoleUpdate) ClearDeletedBy() *RoleUpdate {
	ru.mutation.ClearDeletedBy()
	return ru
}

// SetDeletedAt sets the "deleted_at" field.
func (ru *RoleUpdate) SetDeletedAt(t time.Time) *RoleUpdate {
	ru.mutation.SetDeletedAt(t)
	return ru
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ru *RoleUpdate) SetNillableDeletedAt(t *time.Time) *RoleUpdate {
	if t != nil {
		ru.SetDeletedAt(*t)
	}
	return ru
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ru *RoleUpdate) ClearDeletedAt() *RoleUpdate {
	ru.mutation.ClearDeletedAt()
	return ru
}

// SetName sets the "name" field.
func (ru *RoleUpdate) SetName(s string) *RoleUpdate {
	ru.mutation.SetName(s)
	return ru
}

// SetText sets the "text" field.
func (ru *RoleUpdate) SetText(s string) *RoleUpdate {
	ru.mutation.SetText(s)
	return ru
}

// Mutation returns the RoleMutation object of the builder.
func (ru *RoleUpdate) Mutation() *RoleMutation {
	return ru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RoleUpdate) Save(ctx context.Context) (int, error) {
	ru.defaults()
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RoleUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RoleUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ru *RoleUpdate) defaults() {
	if _, ok := ru.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ru.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ru *RoleUpdate) check() error {
	if v, ok := ru.mutation.CreatedBy(); ok {
		if err := role.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Role.created_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RoleUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RoleUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ru.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.Versions(); ok {
		_spec.SetField(role.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.AddedVersions(); ok {
		_spec.AddField(role.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := ru.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := ru.mutation.UpdatedBy(); ok {
		_spec.SetField(role.FieldUpdatedBy, field.TypeString, value)
	}
	if ru.mutation.UpdatedByCleared() {
		_spec.ClearField(role.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ru.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ru.mutation.DeletedBy(); ok {
		_spec.SetField(role.FieldDeletedBy, field.TypeString, value)
	}
	if ru.mutation.DeletedByCleared() {
		_spec.ClearField(role.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ru.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if ru.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ru.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ru.mutation.Text(); ok {
		_spec.SetField(role.FieldText, field.TypeString, value)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RoleMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVersions sets the "versions" field.
func (ruo *RoleUpdateOne) SetVersions(i int64) *RoleUpdateOne {
	ruo.mutation.ResetVersions()
	ruo.mutation.SetVersions(i)
	return ruo
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableVersions(i *int64) *RoleUpdateOne {
	if i != nil {
		ruo.SetVersions(*i)
	}
	return ruo
}

// AddVersions adds i to the "versions" field.
func (ruo *RoleUpdateOne) AddVersions(i int64) *RoleUpdateOne {
	ruo.mutation.AddVersions(i)
	return ruo
}

// SetCreatedBy sets the "created_by" field.
func (ruo *RoleUpdateOne) SetCreatedBy(s string) *RoleUpdateOne {
	ruo.mutation.SetCreatedBy(s)
	return ruo
}

// SetUpdatedBy sets the "updated_by" field.
func (ruo *RoleUpdateOne) SetUpdatedBy(s string) *RoleUpdateOne {
	ruo.mutation.SetUpdatedBy(s)
	return ruo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableUpdatedBy(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetUpdatedBy(*s)
	}
	return ruo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (ruo *RoleUpdateOne) ClearUpdatedBy() *RoleUpdateOne {
	ruo.mutation.ClearUpdatedBy()
	return ruo
}

// SetUpdatedAt sets the "updated_at" field.
func (ruo *RoleUpdateOne) SetUpdatedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetUpdatedAt(t)
	return ruo
}

// SetDeletedBy sets the "deleted_by" field.
func (ruo *RoleUpdateOne) SetDeletedBy(s string) *RoleUpdateOne {
	ruo.mutation.SetDeletedBy(s)
	return ruo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDeletedBy(s *string) *RoleUpdateOne {
	if s != nil {
		ruo.SetDeletedBy(*s)
	}
	return ruo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (ruo *RoleUpdateOne) ClearDeletedBy() *RoleUpdateOne {
	ruo.mutation.ClearDeletedBy()
	return ruo
}

// SetDeletedAt sets the "deleted_at" field.
func (ruo *RoleUpdateOne) SetDeletedAt(t time.Time) *RoleUpdateOne {
	ruo.mutation.SetDeletedAt(t)
	return ruo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruo *RoleUpdateOne) SetNillableDeletedAt(t *time.Time) *RoleUpdateOne {
	if t != nil {
		ruo.SetDeletedAt(*t)
	}
	return ruo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (ruo *RoleUpdateOne) ClearDeletedAt() *RoleUpdateOne {
	ruo.mutation.ClearDeletedAt()
	return ruo
}

// SetName sets the "name" field.
func (ruo *RoleUpdateOne) SetName(s string) *RoleUpdateOne {
	ruo.mutation.SetName(s)
	return ruo
}

// SetText sets the "text" field.
func (ruo *RoleUpdateOne) SetText(s string) *RoleUpdateOne {
	ruo.mutation.SetText(s)
	return ruo
}

// Mutation returns the RoleMutation object of the builder.
func (ruo *RoleUpdateOne) Mutation() *RoleMutation {
	return ruo.mutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (ruo *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Role entity.
func (ruo *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	ruo.defaults()
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruo *RoleUpdateOne) defaults() {
	if _, ok := ruo.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		ruo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruo *RoleUpdateOne) check() error {
	if v, ok := ruo.mutation.CreatedBy(); ok {
		if err := role.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "Role.created_by": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RoleUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RoleUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := ruo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeUint64))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.Versions(); ok {
		_spec.SetField(role.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.AddedVersions(); ok {
		_spec.AddField(role.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := ruo.mutation.CreatedBy(); ok {
		_spec.SetField(role.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := ruo.mutation.UpdatedBy(); ok {
		_spec.SetField(role.FieldUpdatedBy, field.TypeString, value)
	}
	if ruo.mutation.UpdatedByCleared() {
		_spec.ClearField(role.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := ruo.mutation.DeletedBy(); ok {
		_spec.SetField(role.FieldDeletedBy, field.TypeString, value)
	}
	if ruo.mutation.DeletedByCleared() {
		_spec.ClearField(role.FieldDeletedBy, field.TypeString)
	}
	if value, ok := ruo.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
	}
	if ruo.mutation.DeletedAtCleared() {
		_spec.ClearField(role.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := ruo.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := ruo.mutation.Text(); ok {
		_spec.SetField(role.FieldText, field.TypeString, value)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Role{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
