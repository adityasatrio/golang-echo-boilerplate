// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/predicate"
	"myapp/ent/systemparameter"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemParameterUpdate is the builder for updating SystemParameter entities.
type SystemParameterUpdate struct {
	config
	hooks     []Hook
	mutation  *SystemParameterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SystemParameterUpdate builder.
func (spu *SystemParameterUpdate) Where(ps ...predicate.SystemParameter) *SystemParameterUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetVersions sets the "versions" field.
func (spu *SystemParameterUpdate) SetVersions(i int64) *SystemParameterUpdate {
	spu.mutation.ResetVersions()
	spu.mutation.SetVersions(i)
	return spu
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (spu *SystemParameterUpdate) SetNillableVersions(i *int64) *SystemParameterUpdate {
	if i != nil {
		spu.SetVersions(*i)
	}
	return spu
}

// AddVersions adds i to the "versions" field.
func (spu *SystemParameterUpdate) AddVersions(i int64) *SystemParameterUpdate {
	spu.mutation.AddVersions(i)
	return spu
}

// SetCreatedBy sets the "created_by" field.
func (spu *SystemParameterUpdate) SetCreatedBy(s string) *SystemParameterUpdate {
	spu.mutation.SetCreatedBy(s)
	return spu
}

// SetUpdatedBy sets the "updated_by" field.
func (spu *SystemParameterUpdate) SetUpdatedBy(s string) *SystemParameterUpdate {
	spu.mutation.SetUpdatedBy(s)
	return spu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spu *SystemParameterUpdate) SetNillableUpdatedBy(s *string) *SystemParameterUpdate {
	if s != nil {
		spu.SetUpdatedBy(*s)
	}
	return spu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spu *SystemParameterUpdate) ClearUpdatedBy() *SystemParameterUpdate {
	spu.mutation.ClearUpdatedBy()
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SystemParameterUpdate) SetUpdatedAt(t time.Time) *SystemParameterUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetDeletedBy sets the "deleted_by" field.
func (spu *SystemParameterUpdate) SetDeletedBy(s string) *SystemParameterUpdate {
	spu.mutation.SetDeletedBy(s)
	return spu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (spu *SystemParameterUpdate) SetNillableDeletedBy(s *string) *SystemParameterUpdate {
	if s != nil {
		spu.SetDeletedBy(*s)
	}
	return spu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (spu *SystemParameterUpdate) ClearDeletedBy() *SystemParameterUpdate {
	spu.mutation.ClearDeletedBy()
	return spu
}

// SetDeletedAt sets the "deleted_at" field.
func (spu *SystemParameterUpdate) SetDeletedAt(t time.Time) *SystemParameterUpdate {
	spu.mutation.SetDeletedAt(t)
	return spu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spu *SystemParameterUpdate) SetNillableDeletedAt(t *time.Time) *SystemParameterUpdate {
	if t != nil {
		spu.SetDeletedAt(*t)
	}
	return spu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spu *SystemParameterUpdate) ClearDeletedAt() *SystemParameterUpdate {
	spu.mutation.ClearDeletedAt()
	return spu
}

// SetKey sets the "key" field.
func (spu *SystemParameterUpdate) SetKey(s string) *SystemParameterUpdate {
	spu.mutation.SetKey(s)
	return spu
}

// SetValue sets the "value" field.
func (spu *SystemParameterUpdate) SetValue(s string) *SystemParameterUpdate {
	spu.mutation.SetValue(s)
	return spu
}

// Mutation returns the SystemParameterMutation object of the builder.
func (spu *SystemParameterUpdate) Mutation() *SystemParameterMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SystemParameterUpdate) Save(ctx context.Context) (int, error) {
	spu.defaults()
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SystemParameterUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SystemParameterUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SystemParameterUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spu *SystemParameterUpdate) defaults() {
	if _, ok := spu.mutation.UpdatedAt(); !ok {
		v := systemparameter.UpdateDefaultUpdatedAt()
		spu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SystemParameterUpdate) check() error {
	if v, ok := spu.mutation.CreatedBy(); ok {
		if err := systemparameter.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemParameter.created_by": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Key(); ok {
		if err := systemparameter.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "SystemParameter.key": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Value(); ok {
		if err := systemparameter.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "SystemParameter.value": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spu *SystemParameterUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemParameterUpdate {
	spu.modifiers = append(spu.modifiers, modifiers...)
	return spu
}

func (spu *SystemParameterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemparameter.Table, systemparameter.Columns, sqlgraph.NewFieldSpec(systemparameter.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Versions(); ok {
		_spec.SetField(systemparameter.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.AddedVersions(); ok {
		_spec.AddField(systemparameter.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := spu.mutation.CreatedBy(); ok {
		_spec.SetField(systemparameter.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := spu.mutation.UpdatedBy(); ok {
		_spec.SetField(systemparameter.FieldUpdatedBy, field.TypeString, value)
	}
	if spu.mutation.UpdatedByCleared() {
		_spec.ClearField(systemparameter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(systemparameter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spu.mutation.DeletedBy(); ok {
		_spec.SetField(systemparameter.FieldDeletedBy, field.TypeString, value)
	}
	if spu.mutation.DeletedByCleared() {
		_spec.ClearField(systemparameter.FieldDeletedBy, field.TypeString)
	}
	if value, ok := spu.mutation.DeletedAt(); ok {
		_spec.SetField(systemparameter.FieldDeletedAt, field.TypeTime, value)
	}
	if spu.mutation.DeletedAtCleared() {
		_spec.ClearField(systemparameter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spu.mutation.Key(); ok {
		_spec.SetField(systemparameter.FieldKey, field.TypeString, value)
	}
	if value, ok := spu.mutation.Value(); ok {
		_spec.SetField(systemparameter.FieldValue, field.TypeString, value)
	}
	_spec.AddModifiers(spu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemparameter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SystemParameterUpdateOne is the builder for updating a single SystemParameter entity.
type SystemParameterUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SystemParameterMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetVersions sets the "versions" field.
func (spuo *SystemParameterUpdateOne) SetVersions(i int64) *SystemParameterUpdateOne {
	spuo.mutation.ResetVersions()
	spuo.mutation.SetVersions(i)
	return spuo
}

// SetNillableVersions sets the "versions" field if the given value is not nil.
func (spuo *SystemParameterUpdateOne) SetNillableVersions(i *int64) *SystemParameterUpdateOne {
	if i != nil {
		spuo.SetVersions(*i)
	}
	return spuo
}

// AddVersions adds i to the "versions" field.
func (spuo *SystemParameterUpdateOne) AddVersions(i int64) *SystemParameterUpdateOne {
	spuo.mutation.AddVersions(i)
	return spuo
}

// SetCreatedBy sets the "created_by" field.
func (spuo *SystemParameterUpdateOne) SetCreatedBy(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetCreatedBy(s)
	return spuo
}

// SetUpdatedBy sets the "updated_by" field.
func (spuo *SystemParameterUpdateOne) SetUpdatedBy(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetUpdatedBy(s)
	return spuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spuo *SystemParameterUpdateOne) SetNillableUpdatedBy(s *string) *SystemParameterUpdateOne {
	if s != nil {
		spuo.SetUpdatedBy(*s)
	}
	return spuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spuo *SystemParameterUpdateOne) ClearUpdatedBy() *SystemParameterUpdateOne {
	spuo.mutation.ClearUpdatedBy()
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SystemParameterUpdateOne) SetUpdatedAt(t time.Time) *SystemParameterUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetDeletedBy sets the "deleted_by" field.
func (spuo *SystemParameterUpdateOne) SetDeletedBy(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetDeletedBy(s)
	return spuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (spuo *SystemParameterUpdateOne) SetNillableDeletedBy(s *string) *SystemParameterUpdateOne {
	if s != nil {
		spuo.SetDeletedBy(*s)
	}
	return spuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (spuo *SystemParameterUpdateOne) ClearDeletedBy() *SystemParameterUpdateOne {
	spuo.mutation.ClearDeletedBy()
	return spuo
}

// SetDeletedAt sets the "deleted_at" field.
func (spuo *SystemParameterUpdateOne) SetDeletedAt(t time.Time) *SystemParameterUpdateOne {
	spuo.mutation.SetDeletedAt(t)
	return spuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (spuo *SystemParameterUpdateOne) SetNillableDeletedAt(t *time.Time) *SystemParameterUpdateOne {
	if t != nil {
		spuo.SetDeletedAt(*t)
	}
	return spuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (spuo *SystemParameterUpdateOne) ClearDeletedAt() *SystemParameterUpdateOne {
	spuo.mutation.ClearDeletedAt()
	return spuo
}

// SetKey sets the "key" field.
func (spuo *SystemParameterUpdateOne) SetKey(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetKey(s)
	return spuo
}

// SetValue sets the "value" field.
func (spuo *SystemParameterUpdateOne) SetValue(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetValue(s)
	return spuo
}

// Mutation returns the SystemParameterMutation object of the builder.
func (spuo *SystemParameterUpdateOne) Mutation() *SystemParameterMutation {
	return spuo.mutation
}

// Where appends a list predicates to the SystemParameterUpdate builder.
func (spuo *SystemParameterUpdateOne) Where(ps ...predicate.SystemParameter) *SystemParameterUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SystemParameterUpdateOne) Select(field string, fields ...string) *SystemParameterUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SystemParameter entity.
func (spuo *SystemParameterUpdateOne) Save(ctx context.Context) (*SystemParameter, error) {
	spuo.defaults()
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SystemParameterUpdateOne) SaveX(ctx context.Context) *SystemParameter {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SystemParameterUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SystemParameterUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (spuo *SystemParameterUpdateOne) defaults() {
	if _, ok := spuo.mutation.UpdatedAt(); !ok {
		v := systemparameter.UpdateDefaultUpdatedAt()
		spuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SystemParameterUpdateOne) check() error {
	if v, ok := spuo.mutation.CreatedBy(); ok {
		if err := systemparameter.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "SystemParameter.created_by": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Key(); ok {
		if err := systemparameter.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "SystemParameter.key": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Value(); ok {
		if err := systemparameter.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "SystemParameter.value": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spuo *SystemParameterUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SystemParameterUpdateOne {
	spuo.modifiers = append(spuo.modifiers, modifiers...)
	return spuo
}

func (spuo *SystemParameterUpdateOne) sqlSave(ctx context.Context) (_node *SystemParameter, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(systemparameter.Table, systemparameter.Columns, sqlgraph.NewFieldSpec(systemparameter.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemParameter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemparameter.FieldID)
		for _, f := range fields {
			if !systemparameter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemparameter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Versions(); ok {
		_spec.SetField(systemparameter.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.AddedVersions(); ok {
		_spec.AddField(systemparameter.FieldVersions, field.TypeInt64, value)
	}
	if value, ok := spuo.mutation.CreatedBy(); ok {
		_spec.SetField(systemparameter.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := spuo.mutation.UpdatedBy(); ok {
		_spec.SetField(systemparameter.FieldUpdatedBy, field.TypeString, value)
	}
	if spuo.mutation.UpdatedByCleared() {
		_spec.ClearField(systemparameter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(systemparameter.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := spuo.mutation.DeletedBy(); ok {
		_spec.SetField(systemparameter.FieldDeletedBy, field.TypeString, value)
	}
	if spuo.mutation.DeletedByCleared() {
		_spec.ClearField(systemparameter.FieldDeletedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.DeletedAt(); ok {
		_spec.SetField(systemparameter.FieldDeletedAt, field.TypeTime, value)
	}
	if spuo.mutation.DeletedAtCleared() {
		_spec.ClearField(systemparameter.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := spuo.mutation.Key(); ok {
		_spec.SetField(systemparameter.FieldKey, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Value(); ok {
		_spec.SetField(systemparameter.FieldValue, field.TypeString, value)
	}
	_spec.AddModifiers(spuo.modifiers...)
	_node = &SystemParameter{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemparameter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
