// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/roleuser"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUserCreate is the builder for creating a RoleUser entity.
type RoleUserCreate struct {
	config
	mutation *RoleUserMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (ruc *RoleUserCreate) SetVersion(i int64) *RoleUserCreate {
	ruc.mutation.SetVersion(i)
	return ruc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableVersion(i *int64) *RoleUserCreate {
	if i != nil {
		ruc.SetVersion(*i)
	}
	return ruc
}

// SetCreatedBy sets the "created_by" field.
func (ruc *RoleUserCreate) SetCreatedBy(s string) *RoleUserCreate {
	ruc.mutation.SetCreatedBy(s)
	return ruc
}

// SetCreatedAt sets the "created_at" field.
func (ruc *RoleUserCreate) SetCreatedAt(t time.Time) *RoleUserCreate {
	ruc.mutation.SetCreatedAt(t)
	return ruc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableCreatedAt(t *time.Time) *RoleUserCreate {
	if t != nil {
		ruc.SetCreatedAt(*t)
	}
	return ruc
}

// SetUpdatedBy sets the "updated_by" field.
func (ruc *RoleUserCreate) SetUpdatedBy(s string) *RoleUserCreate {
	ruc.mutation.SetUpdatedBy(s)
	return ruc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableUpdatedBy(s *string) *RoleUserCreate {
	if s != nil {
		ruc.SetUpdatedBy(*s)
	}
	return ruc
}

// SetUpdatedAt sets the "updated_at" field.
func (ruc *RoleUserCreate) SetUpdatedAt(t time.Time) *RoleUserCreate {
	ruc.mutation.SetUpdatedAt(t)
	return ruc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableUpdatedAt(t *time.Time) *RoleUserCreate {
	if t != nil {
		ruc.SetUpdatedAt(*t)
	}
	return ruc
}

// SetDeletedBy sets the "deleted_by" field.
func (ruc *RoleUserCreate) SetDeletedBy(s string) *RoleUserCreate {
	ruc.mutation.SetDeletedBy(s)
	return ruc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableDeletedBy(s *string) *RoleUserCreate {
	if s != nil {
		ruc.SetDeletedBy(*s)
	}
	return ruc
}

// SetDeletedAt sets the "deleted_at" field.
func (ruc *RoleUserCreate) SetDeletedAt(t time.Time) *RoleUserCreate {
	ruc.mutation.SetDeletedAt(t)
	return ruc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableDeletedAt(t *time.Time) *RoleUserCreate {
	if t != nil {
		ruc.SetDeletedAt(*t)
	}
	return ruc
}

// SetUserID sets the "user_id" field.
func (ruc *RoleUserCreate) SetUserID(u uint64) *RoleUserCreate {
	ruc.mutation.SetUserID(u)
	return ruc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableUserID(u *uint64) *RoleUserCreate {
	if u != nil {
		ruc.SetUserID(*u)
	}
	return ruc
}

// SetRoleID sets the "role_id" field.
func (ruc *RoleUserCreate) SetRoleID(u uint64) *RoleUserCreate {
	ruc.mutation.SetRoleID(u)
	return ruc
}

// SetNillableRoleID sets the "role_id" field if the given value is not nil.
func (ruc *RoleUserCreate) SetNillableRoleID(u *uint64) *RoleUserCreate {
	if u != nil {
		ruc.SetRoleID(*u)
	}
	return ruc
}

// SetID sets the "id" field.
func (ruc *RoleUserCreate) SetID(u uint64) *RoleUserCreate {
	ruc.mutation.SetID(u)
	return ruc
}

// Mutation returns the RoleUserMutation object of the builder.
func (ruc *RoleUserCreate) Mutation() *RoleUserMutation {
	return ruc.mutation
}

// Save creates the RoleUser in the database.
func (ruc *RoleUserCreate) Save(ctx context.Context) (*RoleUser, error) {
	ruc.defaults()
	return withHooks(ctx, ruc.sqlSave, ruc.mutation, ruc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ruc *RoleUserCreate) SaveX(ctx context.Context) *RoleUser {
	v, err := ruc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ruc *RoleUserCreate) Exec(ctx context.Context) error {
	_, err := ruc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruc *RoleUserCreate) ExecX(ctx context.Context) {
	if err := ruc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ruc *RoleUserCreate) defaults() {
	if _, ok := ruc.mutation.Version(); !ok {
		v := roleuser.DefaultVersion()
		ruc.mutation.SetVersion(v)
	}
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		v := roleuser.DefaultCreatedAt()
		ruc.mutation.SetCreatedAt(v)
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		v := roleuser.DefaultUpdatedAt()
		ruc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ruc *RoleUserCreate) check() error {
	if _, ok := ruc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "RoleUser.version"`)}
	}
	if _, ok := ruc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "RoleUser.created_by"`)}
	}
	if v, ok := ruc.mutation.CreatedBy(); ok {
		if err := roleuser.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "RoleUser.created_by": %w`, err)}
		}
	}
	if _, ok := ruc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "RoleUser.created_at"`)}
	}
	if _, ok := ruc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "RoleUser.updated_at"`)}
	}
	return nil
}

func (ruc *RoleUserCreate) sqlSave(ctx context.Context) (*RoleUser, error) {
	if err := ruc.check(); err != nil {
		return nil, err
	}
	_node, _spec := ruc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ruc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	ruc.mutation.id = &_node.ID
	ruc.mutation.done = true
	return _node, nil
}

func (ruc *RoleUserCreate) createSpec() (*RoleUser, *sqlgraph.CreateSpec) {
	var (
		_node = &RoleUser{config: ruc.config}
		_spec = sqlgraph.NewCreateSpec(roleuser.Table, sqlgraph.NewFieldSpec(roleuser.FieldID, field.TypeUint64))
	)
	if id, ok := ruc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ruc.mutation.Version(); ok {
		_spec.SetField(roleuser.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := ruc.mutation.CreatedBy(); ok {
		_spec.SetField(roleuser.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := ruc.mutation.CreatedAt(); ok {
		_spec.SetField(roleuser.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := ruc.mutation.UpdatedBy(); ok {
		_spec.SetField(roleuser.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := ruc.mutation.UpdatedAt(); ok {
		_spec.SetField(roleuser.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := ruc.mutation.DeletedBy(); ok {
		_spec.SetField(roleuser.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := ruc.mutation.DeletedAt(); ok {
		_spec.SetField(roleuser.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := ruc.mutation.UserID(); ok {
		_spec.SetField(roleuser.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := ruc.mutation.RoleID(); ok {
		_spec.SetField(roleuser.FieldRoleID, field.TypeUint64, value)
		_node.RoleID = value
	}
	return _node, _spec
}

// RoleUserCreateBulk is the builder for creating many RoleUser entities in bulk.
type RoleUserCreateBulk struct {
	config
	builders []*RoleUserCreate
}

// Save creates the RoleUser entities in the database.
func (rucb *RoleUserCreateBulk) Save(ctx context.Context) ([]*RoleUser, error) {
	specs := make([]*sqlgraph.CreateSpec, len(rucb.builders))
	nodes := make([]*RoleUser, len(rucb.builders))
	mutators := make([]Mutator, len(rucb.builders))
	for i := range rucb.builders {
		func(i int, root context.Context) {
			builder := rucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rucb *RoleUserCreateBulk) SaveX(ctx context.Context) []*RoleUser {
	v, err := rucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rucb *RoleUserCreateBulk) Exec(ctx context.Context) error {
	_, err := rucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rucb *RoleUserCreateBulk) ExecX(ctx context.Context) {
	if err := rucb.Exec(ctx); err != nil {
		panic(err)
	}
}
