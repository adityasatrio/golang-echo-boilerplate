// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/atlasschemarevision"
	"myapp/ent/predicate"
	"myapp/ent/schema"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// AtlasSchemaRevisionUpdate is the builder for updating AtlasSchemaRevision entities.
type AtlasSchemaRevisionUpdate struct {
	config
	hooks    []Hook
	mutation *AtlasSchemaRevisionMutation
}

// Where appends a list predicates to the AtlasSchemaRevisionUpdate builder.
func (asru *AtlasSchemaRevisionUpdate) Where(ps ...predicate.AtlasSchemaRevision) *AtlasSchemaRevisionUpdate {
	asru.mutation.Where(ps...)
	return asru
}

// SetDescription sets the "description" field.
func (asru *AtlasSchemaRevisionUpdate) SetDescription(s string) *AtlasSchemaRevisionUpdate {
	asru.mutation.SetDescription(s)
	return asru
}

// SetType sets the "type" field.
func (asru *AtlasSchemaRevisionUpdate) SetType(u uint64) *AtlasSchemaRevisionUpdate {
	asru.mutation.ResetType()
	asru.mutation.SetType(u)
	return asru
}

// AddType adds u to the "type" field.
func (asru *AtlasSchemaRevisionUpdate) AddType(u int64) *AtlasSchemaRevisionUpdate {
	asru.mutation.AddType(u)
	return asru
}

// SetApplied sets the "applied" field.
func (asru *AtlasSchemaRevisionUpdate) SetApplied(i int) *AtlasSchemaRevisionUpdate {
	asru.mutation.ResetApplied()
	asru.mutation.SetApplied(i)
	return asru
}

// AddApplied adds i to the "applied" field.
func (asru *AtlasSchemaRevisionUpdate) AddApplied(i int) *AtlasSchemaRevisionUpdate {
	asru.mutation.AddApplied(i)
	return asru
}

// SetTotal sets the "total" field.
func (asru *AtlasSchemaRevisionUpdate) SetTotal(i int) *AtlasSchemaRevisionUpdate {
	asru.mutation.ResetTotal()
	asru.mutation.SetTotal(i)
	return asru
}

// AddTotal adds i to the "total" field.
func (asru *AtlasSchemaRevisionUpdate) AddTotal(i int) *AtlasSchemaRevisionUpdate {
	asru.mutation.AddTotal(i)
	return asru
}

// SetExecutedAt sets the "executed_at" field.
func (asru *AtlasSchemaRevisionUpdate) SetExecutedAt(t time.Time) *AtlasSchemaRevisionUpdate {
	asru.mutation.SetExecutedAt(t)
	return asru
}

// SetExecutionTime sets the "execution_time" field.
func (asru *AtlasSchemaRevisionUpdate) SetExecutionTime(i int) *AtlasSchemaRevisionUpdate {
	asru.mutation.ResetExecutionTime()
	asru.mutation.SetExecutionTime(i)
	return asru
}

// AddExecutionTime adds i to the "execution_time" field.
func (asru *AtlasSchemaRevisionUpdate) AddExecutionTime(i int) *AtlasSchemaRevisionUpdate {
	asru.mutation.AddExecutionTime(i)
	return asru
}

// SetError sets the "error" field.
func (asru *AtlasSchemaRevisionUpdate) SetError(s string) *AtlasSchemaRevisionUpdate {
	asru.mutation.SetError(s)
	return asru
}

// SetNillableError sets the "error" field if the given value is not nil.
func (asru *AtlasSchemaRevisionUpdate) SetNillableError(s *string) *AtlasSchemaRevisionUpdate {
	if s != nil {
		asru.SetError(*s)
	}
	return asru
}

// ClearError clears the value of the "error" field.
func (asru *AtlasSchemaRevisionUpdate) ClearError() *AtlasSchemaRevisionUpdate {
	asru.mutation.ClearError()
	return asru
}

// SetErrorStmt sets the "error_stmt" field.
func (asru *AtlasSchemaRevisionUpdate) SetErrorStmt(s string) *AtlasSchemaRevisionUpdate {
	asru.mutation.SetErrorStmt(s)
	return asru
}

// SetNillableErrorStmt sets the "error_stmt" field if the given value is not nil.
func (asru *AtlasSchemaRevisionUpdate) SetNillableErrorStmt(s *string) *AtlasSchemaRevisionUpdate {
	if s != nil {
		asru.SetErrorStmt(*s)
	}
	return asru
}

// ClearErrorStmt clears the value of the "error_stmt" field.
func (asru *AtlasSchemaRevisionUpdate) ClearErrorStmt() *AtlasSchemaRevisionUpdate {
	asru.mutation.ClearErrorStmt()
	return asru
}

// SetHash sets the "hash" field.
func (asru *AtlasSchemaRevisionUpdate) SetHash(s string) *AtlasSchemaRevisionUpdate {
	asru.mutation.SetHash(s)
	return asru
}

// SetPartialHashes sets the "partial_hashes" field.
func (asru *AtlasSchemaRevisionUpdate) SetPartialHashes(sh *schema.PartialHashes) *AtlasSchemaRevisionUpdate {
	asru.mutation.SetPartialHashes(sh)
	return asru
}

// ClearPartialHashes clears the value of the "partial_hashes" field.
func (asru *AtlasSchemaRevisionUpdate) ClearPartialHashes() *AtlasSchemaRevisionUpdate {
	asru.mutation.ClearPartialHashes()
	return asru
}

// SetOperatorVersion sets the "operator_version" field.
func (asru *AtlasSchemaRevisionUpdate) SetOperatorVersion(s string) *AtlasSchemaRevisionUpdate {
	asru.mutation.SetOperatorVersion(s)
	return asru
}

// Mutation returns the AtlasSchemaRevisionMutation object of the builder.
func (asru *AtlasSchemaRevisionUpdate) Mutation() *AtlasSchemaRevisionMutation {
	return asru.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (asru *AtlasSchemaRevisionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(asru.hooks) == 0 {
		affected, err = asru.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AtlasSchemaRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asru.mutation = mutation
			affected, err = asru.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(asru.hooks) - 1; i >= 0; i-- {
			if asru.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asru.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, asru.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (asru *AtlasSchemaRevisionUpdate) SaveX(ctx context.Context) int {
	affected, err := asru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (asru *AtlasSchemaRevisionUpdate) Exec(ctx context.Context) error {
	_, err := asru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asru *AtlasSchemaRevisionUpdate) ExecX(ctx context.Context) {
	if err := asru.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asru *AtlasSchemaRevisionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   atlasschemarevision.Table,
			Columns: atlasschemarevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: atlasschemarevision.FieldID,
			},
		},
	}
	if ps := asru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asru.mutation.Description(); ok {
		_spec.SetField(atlasschemarevision.FieldDescription, field.TypeString, value)
	}
	if value, ok := asru.mutation.GetType(); ok {
		_spec.SetField(atlasschemarevision.FieldType, field.TypeUint64, value)
	}
	if value, ok := asru.mutation.AddedType(); ok {
		_spec.AddField(atlasschemarevision.FieldType, field.TypeUint64, value)
	}
	if value, ok := asru.mutation.Applied(); ok {
		_spec.SetField(atlasschemarevision.FieldApplied, field.TypeInt, value)
	}
	if value, ok := asru.mutation.AddedApplied(); ok {
		_spec.AddField(atlasschemarevision.FieldApplied, field.TypeInt, value)
	}
	if value, ok := asru.mutation.Total(); ok {
		_spec.SetField(atlasschemarevision.FieldTotal, field.TypeInt, value)
	}
	if value, ok := asru.mutation.AddedTotal(); ok {
		_spec.AddField(atlasschemarevision.FieldTotal, field.TypeInt, value)
	}
	if value, ok := asru.mutation.ExecutedAt(); ok {
		_spec.SetField(atlasschemarevision.FieldExecutedAt, field.TypeTime, value)
	}
	if value, ok := asru.mutation.ExecutionTime(); ok {
		_spec.SetField(atlasschemarevision.FieldExecutionTime, field.TypeInt, value)
	}
	if value, ok := asru.mutation.AddedExecutionTime(); ok {
		_spec.AddField(atlasschemarevision.FieldExecutionTime, field.TypeInt, value)
	}
	if value, ok := asru.mutation.Error(); ok {
		_spec.SetField(atlasschemarevision.FieldError, field.TypeString, value)
	}
	if asru.mutation.ErrorCleared() {
		_spec.ClearField(atlasschemarevision.FieldError, field.TypeString)
	}
	if value, ok := asru.mutation.ErrorStmt(); ok {
		_spec.SetField(atlasschemarevision.FieldErrorStmt, field.TypeString, value)
	}
	if asru.mutation.ErrorStmtCleared() {
		_spec.ClearField(atlasschemarevision.FieldErrorStmt, field.TypeString)
	}
	if value, ok := asru.mutation.Hash(); ok {
		_spec.SetField(atlasschemarevision.FieldHash, field.TypeString, value)
	}
	if value, ok := asru.mutation.PartialHashes(); ok {
		_spec.SetField(atlasschemarevision.FieldPartialHashes, field.TypeJSON, value)
	}
	if asru.mutation.PartialHashesCleared() {
		_spec.ClearField(atlasschemarevision.FieldPartialHashes, field.TypeJSON)
	}
	if value, ok := asru.mutation.OperatorVersion(); ok {
		_spec.SetField(atlasschemarevision.FieldOperatorVersion, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, asru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{atlasschemarevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// AtlasSchemaRevisionUpdateOne is the builder for updating a single AtlasSchemaRevision entity.
type AtlasSchemaRevisionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AtlasSchemaRevisionMutation
}

// SetDescription sets the "description" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetDescription(s string) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.SetDescription(s)
	return asruo
}

// SetType sets the "type" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetType(u uint64) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.ResetType()
	asruo.mutation.SetType(u)
	return asruo
}

// AddType adds u to the "type" field.
func (asruo *AtlasSchemaRevisionUpdateOne) AddType(u int64) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.AddType(u)
	return asruo
}

// SetApplied sets the "applied" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetApplied(i int) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.ResetApplied()
	asruo.mutation.SetApplied(i)
	return asruo
}

// AddApplied adds i to the "applied" field.
func (asruo *AtlasSchemaRevisionUpdateOne) AddApplied(i int) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.AddApplied(i)
	return asruo
}

// SetTotal sets the "total" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetTotal(i int) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.ResetTotal()
	asruo.mutation.SetTotal(i)
	return asruo
}

// AddTotal adds i to the "total" field.
func (asruo *AtlasSchemaRevisionUpdateOne) AddTotal(i int) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.AddTotal(i)
	return asruo
}

// SetExecutedAt sets the "executed_at" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetExecutedAt(t time.Time) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.SetExecutedAt(t)
	return asruo
}

// SetExecutionTime sets the "execution_time" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetExecutionTime(i int) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.ResetExecutionTime()
	asruo.mutation.SetExecutionTime(i)
	return asruo
}

// AddExecutionTime adds i to the "execution_time" field.
func (asruo *AtlasSchemaRevisionUpdateOne) AddExecutionTime(i int) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.AddExecutionTime(i)
	return asruo
}

// SetError sets the "error" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetError(s string) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.SetError(s)
	return asruo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (asruo *AtlasSchemaRevisionUpdateOne) SetNillableError(s *string) *AtlasSchemaRevisionUpdateOne {
	if s != nil {
		asruo.SetError(*s)
	}
	return asruo
}

// ClearError clears the value of the "error" field.
func (asruo *AtlasSchemaRevisionUpdateOne) ClearError() *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.ClearError()
	return asruo
}

// SetErrorStmt sets the "error_stmt" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetErrorStmt(s string) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.SetErrorStmt(s)
	return asruo
}

// SetNillableErrorStmt sets the "error_stmt" field if the given value is not nil.
func (asruo *AtlasSchemaRevisionUpdateOne) SetNillableErrorStmt(s *string) *AtlasSchemaRevisionUpdateOne {
	if s != nil {
		asruo.SetErrorStmt(*s)
	}
	return asruo
}

// ClearErrorStmt clears the value of the "error_stmt" field.
func (asruo *AtlasSchemaRevisionUpdateOne) ClearErrorStmt() *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.ClearErrorStmt()
	return asruo
}

// SetHash sets the "hash" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetHash(s string) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.SetHash(s)
	return asruo
}

// SetPartialHashes sets the "partial_hashes" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetPartialHashes(sh *schema.PartialHashes) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.SetPartialHashes(sh)
	return asruo
}

// ClearPartialHashes clears the value of the "partial_hashes" field.
func (asruo *AtlasSchemaRevisionUpdateOne) ClearPartialHashes() *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.ClearPartialHashes()
	return asruo
}

// SetOperatorVersion sets the "operator_version" field.
func (asruo *AtlasSchemaRevisionUpdateOne) SetOperatorVersion(s string) *AtlasSchemaRevisionUpdateOne {
	asruo.mutation.SetOperatorVersion(s)
	return asruo
}

// Mutation returns the AtlasSchemaRevisionMutation object of the builder.
func (asruo *AtlasSchemaRevisionUpdateOne) Mutation() *AtlasSchemaRevisionMutation {
	return asruo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (asruo *AtlasSchemaRevisionUpdateOne) Select(field string, fields ...string) *AtlasSchemaRevisionUpdateOne {
	asruo.fields = append([]string{field}, fields...)
	return asruo
}

// Save executes the query and returns the updated AtlasSchemaRevision entity.
func (asruo *AtlasSchemaRevisionUpdateOne) Save(ctx context.Context) (*AtlasSchemaRevision, error) {
	var (
		err  error
		node *AtlasSchemaRevision
	)
	if len(asruo.hooks) == 0 {
		node, err = asruo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*AtlasSchemaRevisionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			asruo.mutation = mutation
			node, err = asruo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(asruo.hooks) - 1; i >= 0; i-- {
			if asruo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = asruo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, asruo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*AtlasSchemaRevision)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from AtlasSchemaRevisionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (asruo *AtlasSchemaRevisionUpdateOne) SaveX(ctx context.Context) *AtlasSchemaRevision {
	node, err := asruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (asruo *AtlasSchemaRevisionUpdateOne) Exec(ctx context.Context) error {
	_, err := asruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (asruo *AtlasSchemaRevisionUpdateOne) ExecX(ctx context.Context) {
	if err := asruo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (asruo *AtlasSchemaRevisionUpdateOne) sqlSave(ctx context.Context) (_node *AtlasSchemaRevision, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   atlasschemarevision.Table,
			Columns: atlasschemarevision.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: atlasschemarevision.FieldID,
			},
		},
	}
	id, ok := asruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AtlasSchemaRevision.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := asruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, atlasschemarevision.FieldID)
		for _, f := range fields {
			if !atlasschemarevision.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != atlasschemarevision.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := asruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := asruo.mutation.Description(); ok {
		_spec.SetField(atlasschemarevision.FieldDescription, field.TypeString, value)
	}
	if value, ok := asruo.mutation.GetType(); ok {
		_spec.SetField(atlasschemarevision.FieldType, field.TypeUint64, value)
	}
	if value, ok := asruo.mutation.AddedType(); ok {
		_spec.AddField(atlasschemarevision.FieldType, field.TypeUint64, value)
	}
	if value, ok := asruo.mutation.Applied(); ok {
		_spec.SetField(atlasschemarevision.FieldApplied, field.TypeInt, value)
	}
	if value, ok := asruo.mutation.AddedApplied(); ok {
		_spec.AddField(atlasschemarevision.FieldApplied, field.TypeInt, value)
	}
	if value, ok := asruo.mutation.Total(); ok {
		_spec.SetField(atlasschemarevision.FieldTotal, field.TypeInt, value)
	}
	if value, ok := asruo.mutation.AddedTotal(); ok {
		_spec.AddField(atlasschemarevision.FieldTotal, field.TypeInt, value)
	}
	if value, ok := asruo.mutation.ExecutedAt(); ok {
		_spec.SetField(atlasschemarevision.FieldExecutedAt, field.TypeTime, value)
	}
	if value, ok := asruo.mutation.ExecutionTime(); ok {
		_spec.SetField(atlasschemarevision.FieldExecutionTime, field.TypeInt, value)
	}
	if value, ok := asruo.mutation.AddedExecutionTime(); ok {
		_spec.AddField(atlasschemarevision.FieldExecutionTime, field.TypeInt, value)
	}
	if value, ok := asruo.mutation.Error(); ok {
		_spec.SetField(atlasschemarevision.FieldError, field.TypeString, value)
	}
	if asruo.mutation.ErrorCleared() {
		_spec.ClearField(atlasschemarevision.FieldError, field.TypeString)
	}
	if value, ok := asruo.mutation.ErrorStmt(); ok {
		_spec.SetField(atlasschemarevision.FieldErrorStmt, field.TypeString, value)
	}
	if asruo.mutation.ErrorStmtCleared() {
		_spec.ClearField(atlasschemarevision.FieldErrorStmt, field.TypeString)
	}
	if value, ok := asruo.mutation.Hash(); ok {
		_spec.SetField(atlasschemarevision.FieldHash, field.TypeString, value)
	}
	if value, ok := asruo.mutation.PartialHashes(); ok {
		_spec.SetField(atlasschemarevision.FieldPartialHashes, field.TypeJSON, value)
	}
	if asruo.mutation.PartialHashesCleared() {
		_spec.ClearField(atlasschemarevision.FieldPartialHashes, field.TypeJSON)
	}
	if value, ok := asruo.mutation.OperatorVersion(); ok {
		_spec.SetField(atlasschemarevision.FieldOperatorVersion, field.TypeString, value)
	}
	_node = &AtlasSchemaRevision{config: asruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, asruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{atlasschemarevision.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
