// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/userdevice"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDeviceCreate is the builder for creating a UserDevice entity.
type UserDeviceCreate struct {
	config
	mutation *UserDeviceMutation
	hooks    []Hook
}

// SetUserID sets the "user_id" field.
func (udc *UserDeviceCreate) SetUserID(u uint64) *UserDeviceCreate {
	udc.mutation.SetUserID(u)
	return udc
}

// SetVersion sets the "version" field.
func (udc *UserDeviceCreate) SetVersion(s string) *UserDeviceCreate {
	udc.mutation.SetVersion(s)
	return udc
}

// SetPlatform sets the "platform" field.
func (udc *UserDeviceCreate) SetPlatform(s string) *UserDeviceCreate {
	udc.mutation.SetPlatform(s)
	return udc
}

// SetLatestSkipUpdate sets the "latest_skip_update" field.
func (udc *UserDeviceCreate) SetLatestSkipUpdate(t time.Time) *UserDeviceCreate {
	udc.mutation.SetLatestSkipUpdate(t)
	return udc
}

// SetNillableLatestSkipUpdate sets the "latest_skip_update" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableLatestSkipUpdate(t *time.Time) *UserDeviceCreate {
	if t != nil {
		udc.SetLatestSkipUpdate(*t)
	}
	return udc
}

// SetCreatedAt sets the "created_at" field.
func (udc *UserDeviceCreate) SetCreatedAt(t time.Time) *UserDeviceCreate {
	udc.mutation.SetCreatedAt(t)
	return udc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableCreatedAt(t *time.Time) *UserDeviceCreate {
	if t != nil {
		udc.SetCreatedAt(*t)
	}
	return udc
}

// SetUpdatedAt sets the "updated_at" field.
func (udc *UserDeviceCreate) SetUpdatedAt(t time.Time) *UserDeviceCreate {
	udc.mutation.SetUpdatedAt(t)
	return udc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableUpdatedAt(t *time.Time) *UserDeviceCreate {
	if t != nil {
		udc.SetUpdatedAt(*t)
	}
	return udc
}

// SetDeviceID sets the "device_id" field.
func (udc *UserDeviceCreate) SetDeviceID(s string) *UserDeviceCreate {
	udc.mutation.SetDeviceID(s)
	return udc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableDeviceID(s *string) *UserDeviceCreate {
	if s != nil {
		udc.SetDeviceID(*s)
	}
	return udc
}

// SetID sets the "id" field.
func (udc *UserDeviceCreate) SetID(u uint64) *UserDeviceCreate {
	udc.mutation.SetID(u)
	return udc
}

// Mutation returns the UserDeviceMutation object of the builder.
func (udc *UserDeviceCreate) Mutation() *UserDeviceMutation {
	return udc.mutation
}

// Save creates the UserDevice in the database.
func (udc *UserDeviceCreate) Save(ctx context.Context) (*UserDevice, error) {
	var (
		err  error
		node *UserDevice
	)
	if len(udc.hooks) == 0 {
		if err = udc.check(); err != nil {
			return nil, err
		}
		node, err = udc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*UserDeviceMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = udc.check(); err != nil {
				return nil, err
			}
			udc.mutation = mutation
			if node, err = udc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(udc.hooks) - 1; i >= 0; i-- {
			if udc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = udc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, udc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*UserDevice)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from UserDeviceMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDeviceCreate) SaveX(ctx context.Context) *UserDevice {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDeviceCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDeviceCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDeviceCreate) check() error {
	if _, ok := udc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserDevice.user_id"`)}
	}
	if _, ok := udc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "UserDevice.version"`)}
	}
	if _, ok := udc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "UserDevice.platform"`)}
	}
	return nil
}

func (udc *UserDeviceCreate) sqlSave(ctx context.Context) (*UserDevice, error) {
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (udc *UserDeviceCreate) createSpec() (*UserDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDevice{config: udc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: userdevice.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: userdevice.FieldID,
			},
		}
	)
	if id, ok := udc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udc.mutation.UserID(); ok {
		_spec.SetField(userdevice.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := udc.mutation.Version(); ok {
		_spec.SetField(userdevice.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := udc.mutation.Platform(); ok {
		_spec.SetField(userdevice.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := udc.mutation.LatestSkipUpdate(); ok {
		_spec.SetField(userdevice.FieldLatestSkipUpdate, field.TypeTime, value)
		_node.LatestSkipUpdate = value
	}
	if value, ok := udc.mutation.CreatedAt(); ok {
		_spec.SetField(userdevice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := udc.mutation.UpdatedAt(); ok {
		_spec.SetField(userdevice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := udc.mutation.DeviceID(); ok {
		_spec.SetField(userdevice.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	return _node, _spec
}

// UserDeviceCreateBulk is the builder for creating many UserDevice entities in bulk.
type UserDeviceCreateBulk struct {
	config
	builders []*UserDeviceCreate
}

// Save creates the UserDevice entities in the database.
func (udcb *UserDeviceCreateBulk) Save(ctx context.Context) ([]*UserDevice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserDevice, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDeviceCreateBulk) SaveX(ctx context.Context) []*UserDevice {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}
