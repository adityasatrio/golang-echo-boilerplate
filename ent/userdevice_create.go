// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/userdevice"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// UserDeviceCreate is the builder for creating a UserDevice entity.
type UserDeviceCreate struct {
	config
	mutation *UserDeviceMutation
	hooks    []Hook
}

// SetVersion sets the "version" field.
func (udc *UserDeviceCreate) SetVersion(i int64) *UserDeviceCreate {
	udc.mutation.SetVersion(i)
	return udc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableVersion(i *int64) *UserDeviceCreate {
	if i != nil {
		udc.SetVersion(*i)
	}
	return udc
}

// SetCreatedBy sets the "created_by" field.
func (udc *UserDeviceCreate) SetCreatedBy(s string) *UserDeviceCreate {
	udc.mutation.SetCreatedBy(s)
	return udc
}

// SetCreatedAt sets the "created_at" field.
func (udc *UserDeviceCreate) SetCreatedAt(t time.Time) *UserDeviceCreate {
	udc.mutation.SetCreatedAt(t)
	return udc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableCreatedAt(t *time.Time) *UserDeviceCreate {
	if t != nil {
		udc.SetCreatedAt(*t)
	}
	return udc
}

// SetUpdatedBy sets the "updated_by" field.
func (udc *UserDeviceCreate) SetUpdatedBy(s string) *UserDeviceCreate {
	udc.mutation.SetUpdatedBy(s)
	return udc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableUpdatedBy(s *string) *UserDeviceCreate {
	if s != nil {
		udc.SetUpdatedBy(*s)
	}
	return udc
}

// SetUpdatedAt sets the "updated_at" field.
func (udc *UserDeviceCreate) SetUpdatedAt(t time.Time) *UserDeviceCreate {
	udc.mutation.SetUpdatedAt(t)
	return udc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableUpdatedAt(t *time.Time) *UserDeviceCreate {
	if t != nil {
		udc.SetUpdatedAt(*t)
	}
	return udc
}

// SetDeletedBy sets the "deleted_by" field.
func (udc *UserDeviceCreate) SetDeletedBy(s string) *UserDeviceCreate {
	udc.mutation.SetDeletedBy(s)
	return udc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableDeletedBy(s *string) *UserDeviceCreate {
	if s != nil {
		udc.SetDeletedBy(*s)
	}
	return udc
}

// SetDeletedAt sets the "deleted_at" field.
func (udc *UserDeviceCreate) SetDeletedAt(t time.Time) *UserDeviceCreate {
	udc.mutation.SetDeletedAt(t)
	return udc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableDeletedAt(t *time.Time) *UserDeviceCreate {
	if t != nil {
		udc.SetDeletedAt(*t)
	}
	return udc
}

// SetUserID sets the "user_id" field.
func (udc *UserDeviceCreate) SetUserID(u uint64) *UserDeviceCreate {
	udc.mutation.SetUserID(u)
	return udc
}

// SetAppVersion sets the "app_version" field.
func (udc *UserDeviceCreate) SetAppVersion(s string) *UserDeviceCreate {
	udc.mutation.SetAppVersion(s)
	return udc
}

// SetPlatform sets the "platform" field.
func (udc *UserDeviceCreate) SetPlatform(s string) *UserDeviceCreate {
	udc.mutation.SetPlatform(s)
	return udc
}

// SetDeviceID sets the "device_id" field.
func (udc *UserDeviceCreate) SetDeviceID(s string) *UserDeviceCreate {
	udc.mutation.SetDeviceID(s)
	return udc
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (udc *UserDeviceCreate) SetNillableDeviceID(s *string) *UserDeviceCreate {
	if s != nil {
		udc.SetDeviceID(*s)
	}
	return udc
}

// SetID sets the "id" field.
func (udc *UserDeviceCreate) SetID(u uint64) *UserDeviceCreate {
	udc.mutation.SetID(u)
	return udc
}

// Mutation returns the UserDeviceMutation object of the builder.
func (udc *UserDeviceCreate) Mutation() *UserDeviceMutation {
	return udc.mutation
}

// Save creates the UserDevice in the database.
func (udc *UserDeviceCreate) Save(ctx context.Context) (*UserDevice, error) {
	udc.defaults()
	return withHooks(ctx, udc.sqlSave, udc.mutation, udc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (udc *UserDeviceCreate) SaveX(ctx context.Context) *UserDevice {
	v, err := udc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udc *UserDeviceCreate) Exec(ctx context.Context) error {
	_, err := udc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udc *UserDeviceCreate) ExecX(ctx context.Context) {
	if err := udc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (udc *UserDeviceCreate) defaults() {
	if _, ok := udc.mutation.Version(); !ok {
		v := userdevice.DefaultVersion()
		udc.mutation.SetVersion(v)
	}
	if _, ok := udc.mutation.CreatedAt(); !ok {
		v := userdevice.DefaultCreatedAt()
		udc.mutation.SetCreatedAt(v)
	}
	if _, ok := udc.mutation.UpdatedAt(); !ok {
		v := userdevice.DefaultUpdatedAt()
		udc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (udc *UserDeviceCreate) check() error {
	if _, ok := udc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`ent: missing required field "UserDevice.version"`)}
	}
	if _, ok := udc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "UserDevice.created_by"`)}
	}
	if v, ok := udc.mutation.CreatedBy(); ok {
		if err := userdevice.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "UserDevice.created_by": %w`, err)}
		}
	}
	if _, ok := udc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "UserDevice.created_at"`)}
	}
	if _, ok := udc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "UserDevice.updated_at"`)}
	}
	if _, ok := udc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "UserDevice.user_id"`)}
	}
	if _, ok := udc.mutation.AppVersion(); !ok {
		return &ValidationError{Name: "app_version", err: errors.New(`ent: missing required field "UserDevice.app_version"`)}
	}
	if _, ok := udc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "UserDevice.platform"`)}
	}
	return nil
}

func (udc *UserDeviceCreate) sqlSave(ctx context.Context) (*UserDevice, error) {
	if err := udc.check(); err != nil {
		return nil, err
	}
	_node, _spec := udc.createSpec()
	if err := sqlgraph.CreateNode(ctx, udc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	udc.mutation.id = &_node.ID
	udc.mutation.done = true
	return _node, nil
}

func (udc *UserDeviceCreate) createSpec() (*UserDevice, *sqlgraph.CreateSpec) {
	var (
		_node = &UserDevice{config: udc.config}
		_spec = sqlgraph.NewCreateSpec(userdevice.Table, sqlgraph.NewFieldSpec(userdevice.FieldID, field.TypeUint64))
	)
	if id, ok := udc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := udc.mutation.Version(); ok {
		_spec.SetField(userdevice.FieldVersion, field.TypeInt64, value)
		_node.Version = value
	}
	if value, ok := udc.mutation.CreatedBy(); ok {
		_spec.SetField(userdevice.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := udc.mutation.CreatedAt(); ok {
		_spec.SetField(userdevice.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := udc.mutation.UpdatedBy(); ok {
		_spec.SetField(userdevice.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := udc.mutation.UpdatedAt(); ok {
		_spec.SetField(userdevice.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := udc.mutation.DeletedBy(); ok {
		_spec.SetField(userdevice.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := udc.mutation.DeletedAt(); ok {
		_spec.SetField(userdevice.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := udc.mutation.UserID(); ok {
		_spec.SetField(userdevice.FieldUserID, field.TypeUint64, value)
		_node.UserID = value
	}
	if value, ok := udc.mutation.AppVersion(); ok {
		_spec.SetField(userdevice.FieldAppVersion, field.TypeString, value)
		_node.AppVersion = value
	}
	if value, ok := udc.mutation.Platform(); ok {
		_spec.SetField(userdevice.FieldPlatform, field.TypeString, value)
		_node.Platform = value
	}
	if value, ok := udc.mutation.DeviceID(); ok {
		_spec.SetField(userdevice.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	return _node, _spec
}

// UserDeviceCreateBulk is the builder for creating many UserDevice entities in bulk.
type UserDeviceCreateBulk struct {
	config
	builders []*UserDeviceCreate
}

// Save creates the UserDevice entities in the database.
func (udcb *UserDeviceCreateBulk) Save(ctx context.Context) ([]*UserDevice, error) {
	specs := make([]*sqlgraph.CreateSpec, len(udcb.builders))
	nodes := make([]*UserDevice, len(udcb.builders))
	mutators := make([]Mutator, len(udcb.builders))
	for i := range udcb.builders {
		func(i int, root context.Context) {
			builder := udcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*UserDeviceMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, udcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, udcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, udcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (udcb *UserDeviceCreateBulk) SaveX(ctx context.Context) []*UserDevice {
	v, err := udcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (udcb *UserDeviceCreateBulk) Exec(ctx context.Context) error {
	_, err := udcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (udcb *UserDeviceCreateBulk) ExecX(ctx context.Context) {
	if err := udcb.Exec(ctx); err != nil {
		panic(err)
	}
}
