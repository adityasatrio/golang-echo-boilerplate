// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"myapp/ent/roleuser"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// RoleUser is the model entity for the RoleUser schema.
type RoleUser struct {
	config `json:"-"`
	// ID of the ent.
	ID uint64 `json:"id,omitempty"`
	// Unix time of when the latest update occurred
	Versions int64 `json:"versions,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// UserID holds the value of the "user_id" field.
	UserID uint64 `json:"user_id,omitempty"`
	// RoleID holds the value of the "role_id" field.
	RoleID       uint64 `json:"role_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RoleUser) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case roleuser.FieldID, roleuser.FieldVersions, roleuser.FieldUserID, roleuser.FieldRoleID:
			values[i] = new(sql.NullInt64)
		case roleuser.FieldCreatedBy, roleuser.FieldUpdatedBy, roleuser.FieldDeletedBy:
			values[i] = new(sql.NullString)
		case roleuser.FieldCreatedAt, roleuser.FieldUpdatedAt, roleuser.FieldDeletedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RoleUser fields.
func (ru *RoleUser) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case roleuser.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ru.ID = uint64(value.Int64)
		case roleuser.FieldVersions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field versions", values[i])
			} else if value.Valid {
				ru.Versions = value.Int64
			}
		case roleuser.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				ru.CreatedBy = value.String
			}
		case roleuser.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				ru.CreatedAt = value.Time
			}
		case roleuser.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				ru.UpdatedBy = value.String
			}
		case roleuser.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				ru.UpdatedAt = value.Time
			}
		case roleuser.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				ru.DeletedBy = value.String
			}
		case roleuser.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				ru.DeletedAt = value.Time
			}
		case roleuser.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				ru.UserID = uint64(value.Int64)
			}
		case roleuser.FieldRoleID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field role_id", values[i])
			} else if value.Valid {
				ru.RoleID = uint64(value.Int64)
			}
		default:
			ru.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RoleUser.
// This includes values selected through modifiers, order, etc.
func (ru *RoleUser) Value(name string) (ent.Value, error) {
	return ru.selectValues.Get(name)
}

// Update returns a builder for updating this RoleUser.
// Note that you need to call RoleUser.Unwrap() before calling this method if this RoleUser
// was returned from a transaction, and the transaction was committed or rolled back.
func (ru *RoleUser) Update() *RoleUserUpdateOne {
	return NewRoleUserClient(ru.config).UpdateOne(ru)
}

// Unwrap unwraps the RoleUser entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ru *RoleUser) Unwrap() *RoleUser {
	_tx, ok := ru.config.driver.(*txDriver)
	if !ok {
		panic("ent: RoleUser is not a transactional entity")
	}
	ru.config.driver = _tx.drv
	return ru
}

// String implements the fmt.Stringer.
func (ru *RoleUser) String() string {
	var builder strings.Builder
	builder.WriteString("RoleUser(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ru.ID))
	builder.WriteString("versions=")
	builder.WriteString(fmt.Sprintf("%v", ru.Versions))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(ru.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(ru.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(ru.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(ru.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(ru.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(ru.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", ru.UserID))
	builder.WriteString(", ")
	builder.WriteString("role_id=")
	builder.WriteString(fmt.Sprintf("%v", ru.RoleID))
	builder.WriteByte(')')
	return builder.String()
}

// RoleUsers is a parsable slice of RoleUser.
type RoleUsers []*RoleUser
