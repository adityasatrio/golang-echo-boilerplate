// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldDeletedBy holds the string denoting the deleted_by field in the database.
	FieldDeletedBy = "deleted_by"
	// FieldDeletedAt holds the string denoting the deleted_at field in the database.
	FieldDeletedAt = "deleted_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// FieldAvatar holds the string denoting the avatar field in the database.
	FieldAvatar = "avatar"
	// FieldRoleID holds the string denoting the role_id field in the database.
	FieldRoleID = "role_id"
	// FieldIsVerified holds the string denoting the is_verified field in the database.
	FieldIsVerified = "is_verified"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEmailVerifiedAt holds the string denoting the email_verified_at field in the database.
	FieldEmailVerifiedAt = "email_verified_at"
	// FieldRememberToken holds the string denoting the remember_token field in the database.
	FieldRememberToken = "remember_token"
	// FieldSocialMediaID holds the string denoting the social_media_id field in the database.
	FieldSocialMediaID = "social_media_id"
	// FieldLoginType holds the string denoting the login_type field in the database.
	FieldLoginType = "login_type"
	// FieldSubSpecialist holds the string denoting the sub_specialist field in the database.
	FieldSubSpecialist = "sub_specialist"
	// FieldFirebaseToken holds the string denoting the firebase_token field in the database.
	FieldFirebaseToken = "firebase_token"
	// FieldInfo holds the string denoting the info field in the database.
	FieldInfo = "info"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldSpecialist holds the string denoting the specialist field in the database.
	FieldSpecialist = "specialist"
	// FieldPhone holds the string denoting the phone field in the database.
	FieldPhone = "phone"
	// FieldLastAccessAt holds the string denoting the last_access_at field in the database.
	FieldLastAccessAt = "last_access_at"
	// FieldPregnancyMode holds the string denoting the pregnancy_mode field in the database.
	FieldPregnancyMode = "pregnancy_mode"
	// FieldLatestSkipUpdate holds the string denoting the latest_skip_update field in the database.
	FieldLatestSkipUpdate = "latest_skip_update"
	// FieldLatestDeletedAt holds the string denoting the latest_deleted_at field in the database.
	FieldLatestDeletedAt = "latest_deleted_at"
	// Table holds the table name of the user in the database.
	Table = "users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldVersion,
	FieldCreatedBy,
	FieldCreatedAt,
	FieldUpdatedBy,
	FieldUpdatedAt,
	FieldDeletedBy,
	FieldDeletedAt,
	FieldName,
	FieldPassword,
	FieldAvatar,
	FieldRoleID,
	FieldIsVerified,
	FieldEmail,
	FieldEmailVerifiedAt,
	FieldRememberToken,
	FieldSocialMediaID,
	FieldLoginType,
	FieldSubSpecialist,
	FieldFirebaseToken,
	FieldInfo,
	FieldDescription,
	FieldSpecialist,
	FieldPhone,
	FieldLastAccessAt,
	FieldPregnancyMode,
	FieldLatestSkipUpdate,
	FieldLatestDeletedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultVersion holds the default value on creation for the "version" field.
	DefaultVersion func() int64
	// CreatedByValidator is a validator for the "created_by" field. It is called by the builders before save.
	CreatedByValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByDeletedBy orders the results by the deleted_by field.
func ByDeletedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedBy, opts...).ToFunc()
}

// ByDeletedAt orders the results by the deleted_at field.
func ByDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeletedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByAvatar orders the results by the avatar field.
func ByAvatar(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAvatar, opts...).ToFunc()
}

// ByRoleID orders the results by the role_id field.
func ByRoleID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRoleID, opts...).ToFunc()
}

// ByIsVerified orders the results by the is_verified field.
func ByIsVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsVerified, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByEmailVerifiedAt orders the results by the email_verified_at field.
func ByEmailVerifiedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmailVerifiedAt, opts...).ToFunc()
}

// ByRememberToken orders the results by the remember_token field.
func ByRememberToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRememberToken, opts...).ToFunc()
}

// BySocialMediaID orders the results by the social_media_id field.
func BySocialMediaID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSocialMediaID, opts...).ToFunc()
}

// ByLoginType orders the results by the login_type field.
func ByLoginType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLoginType, opts...).ToFunc()
}

// BySubSpecialist orders the results by the sub_specialist field.
func BySubSpecialist(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSubSpecialist, opts...).ToFunc()
}

// ByFirebaseToken orders the results by the firebase_token field.
func ByFirebaseToken(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFirebaseToken, opts...).ToFunc()
}

// ByInfo orders the results by the info field.
func ByInfo(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldInfo, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// BySpecialist orders the results by the specialist field.
func BySpecialist(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSpecialist, opts...).ToFunc()
}

// ByPhone orders the results by the phone field.
func ByPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPhone, opts...).ToFunc()
}

// ByLastAccessAt orders the results by the last_access_at field.
func ByLastAccessAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastAccessAt, opts...).ToFunc()
}

// ByPregnancyMode orders the results by the pregnancy_mode field.
func ByPregnancyMode(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPregnancyMode, opts...).ToFunc()
}

// ByLatestSkipUpdate orders the results by the latest_skip_update field.
func ByLatestSkipUpdate(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatestSkipUpdate, opts...).ToFunc()
}

// ByLatestDeletedAt orders the results by the latest_deleted_at field.
func ByLatestDeletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLatestDeletedAt, opts...).ToFunc()
}
