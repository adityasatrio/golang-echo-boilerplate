// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"myapp/ent/predicate"
	"myapp/ent/system_parameter"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SystemParameterUpdate is the builder for updating System_parameter entities.
type SystemParameterUpdate struct {
	config
	hooks    []Hook
	mutation *SystemParameterMutation
}

// Where appends a list predicates to the SystemParameterUpdate builder.
func (spu *SystemParameterUpdate) Where(ps ...predicate.System_parameter) *SystemParameterUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetKey sets the "key" field.
func (spu *SystemParameterUpdate) SetKey(s string) *SystemParameterUpdate {
	spu.mutation.SetKey(s)
	return spu
}

// SetValue sets the "value" field.
func (spu *SystemParameterUpdate) SetValue(s string) *SystemParameterUpdate {
	spu.mutation.SetValue(s)
	return spu
}

// SetIsDeleted sets the "is_deleted" field.
func (spu *SystemParameterUpdate) SetIsDeleted(b bool) *SystemParameterUpdate {
	spu.mutation.SetIsDeleted(b)
	return spu
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (spu *SystemParameterUpdate) SetNillableIsDeleted(b *bool) *SystemParameterUpdate {
	if b != nil {
		spu.SetIsDeleted(*b)
	}
	return spu
}

// SetCreatedBy sets the "created_by" field.
func (spu *SystemParameterUpdate) SetCreatedBy(s string) *SystemParameterUpdate {
	spu.mutation.SetCreatedBy(s)
	return spu
}

// SetUpdatedBy sets the "updated_by" field.
func (spu *SystemParameterUpdate) SetUpdatedBy(s string) *SystemParameterUpdate {
	spu.mutation.SetUpdatedBy(s)
	return spu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spu *SystemParameterUpdate) SetNillableUpdatedBy(s *string) *SystemParameterUpdate {
	if s != nil {
		spu.SetUpdatedBy(*s)
	}
	return spu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spu *SystemParameterUpdate) ClearUpdatedBy() *SystemParameterUpdate {
	spu.mutation.ClearUpdatedBy()
	return spu
}

// SetUpdatedAt sets the "updated_at" field.
func (spu *SystemParameterUpdate) SetUpdatedAt(t time.Time) *SystemParameterUpdate {
	spu.mutation.SetUpdatedAt(t)
	return spu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spu *SystemParameterUpdate) SetNillableUpdatedAt(t *time.Time) *SystemParameterUpdate {
	if t != nil {
		spu.SetUpdatedAt(*t)
	}
	return spu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spu *SystemParameterUpdate) ClearUpdatedAt() *SystemParameterUpdate {
	spu.mutation.ClearUpdatedAt()
	return spu
}

// Mutation returns the SystemParameterMutation object of the builder.
func (spu *SystemParameterUpdate) Mutation() *SystemParameterMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SystemParameterUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SystemParameterMutation](ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SystemParameterUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SystemParameterUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SystemParameterUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SystemParameterUpdate) check() error {
	if v, ok := spu.mutation.Key(); ok {
		if err := system_parameter.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "System_parameter.key": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Value(); ok {
		if err := system_parameter.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "System_parameter.value": %w`, err)}
		}
	}
	if v, ok := spu.mutation.CreatedBy(); ok {
		if err := system_parameter.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "System_parameter.created_by": %w`, err)}
		}
	}
	return nil
}

func (spu *SystemParameterUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(system_parameter.Table, system_parameter.Columns, sqlgraph.NewFieldSpec(system_parameter.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.Key(); ok {
		_spec.SetField(system_parameter.FieldKey, field.TypeString, value)
	}
	if value, ok := spu.mutation.Value(); ok {
		_spec.SetField(system_parameter.FieldValue, field.TypeString, value)
	}
	if value, ok := spu.mutation.IsDeleted(); ok {
		_spec.SetField(system_parameter.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := spu.mutation.CreatedBy(); ok {
		_spec.SetField(system_parameter.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := spu.mutation.UpdatedBy(); ok {
		_spec.SetField(system_parameter.FieldUpdatedBy, field.TypeString, value)
	}
	if spu.mutation.UpdatedByCleared() {
		_spec.ClearField(system_parameter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := spu.mutation.UpdatedAt(); ok {
		_spec.SetField(system_parameter.FieldUpdatedAt, field.TypeTime, value)
	}
	if spu.mutation.UpdatedAtCleared() {
		_spec.ClearField(system_parameter.FieldUpdatedAt, field.TypeTime)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system_parameter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SystemParameterUpdateOne is the builder for updating a single System_parameter entity.
type SystemParameterUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemParameterMutation
}

// SetKey sets the "key" field.
func (spuo *SystemParameterUpdateOne) SetKey(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetKey(s)
	return spuo
}

// SetValue sets the "value" field.
func (spuo *SystemParameterUpdateOne) SetValue(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetValue(s)
	return spuo
}

// SetIsDeleted sets the "is_deleted" field.
func (spuo *SystemParameterUpdateOne) SetIsDeleted(b bool) *SystemParameterUpdateOne {
	spuo.mutation.SetIsDeleted(b)
	return spuo
}

// SetNillableIsDeleted sets the "is_deleted" field if the given value is not nil.
func (spuo *SystemParameterUpdateOne) SetNillableIsDeleted(b *bool) *SystemParameterUpdateOne {
	if b != nil {
		spuo.SetIsDeleted(*b)
	}
	return spuo
}

// SetCreatedBy sets the "created_by" field.
func (spuo *SystemParameterUpdateOne) SetCreatedBy(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetCreatedBy(s)
	return spuo
}

// SetUpdatedBy sets the "updated_by" field.
func (spuo *SystemParameterUpdateOne) SetUpdatedBy(s string) *SystemParameterUpdateOne {
	spuo.mutation.SetUpdatedBy(s)
	return spuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (spuo *SystemParameterUpdateOne) SetNillableUpdatedBy(s *string) *SystemParameterUpdateOne {
	if s != nil {
		spuo.SetUpdatedBy(*s)
	}
	return spuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (spuo *SystemParameterUpdateOne) ClearUpdatedBy() *SystemParameterUpdateOne {
	spuo.mutation.ClearUpdatedBy()
	return spuo
}

// SetUpdatedAt sets the "updated_at" field.
func (spuo *SystemParameterUpdateOne) SetUpdatedAt(t time.Time) *SystemParameterUpdateOne {
	spuo.mutation.SetUpdatedAt(t)
	return spuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (spuo *SystemParameterUpdateOne) SetNillableUpdatedAt(t *time.Time) *SystemParameterUpdateOne {
	if t != nil {
		spuo.SetUpdatedAt(*t)
	}
	return spuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (spuo *SystemParameterUpdateOne) ClearUpdatedAt() *SystemParameterUpdateOne {
	spuo.mutation.ClearUpdatedAt()
	return spuo
}

// Mutation returns the SystemParameterMutation object of the builder.
func (spuo *SystemParameterUpdateOne) Mutation() *SystemParameterMutation {
	return spuo.mutation
}

// Where appends a list predicates to the SystemParameterUpdate builder.
func (spuo *SystemParameterUpdateOne) Where(ps ...predicate.System_parameter) *SystemParameterUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SystemParameterUpdateOne) Select(field string, fields ...string) *SystemParameterUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated System_parameter entity.
func (spuo *SystemParameterUpdateOne) Save(ctx context.Context) (*System_parameter, error) {
	return withHooks[*System_parameter, SystemParameterMutation](ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SystemParameterUpdateOne) SaveX(ctx context.Context) *System_parameter {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SystemParameterUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SystemParameterUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SystemParameterUpdateOne) check() error {
	if v, ok := spuo.mutation.Key(); ok {
		if err := system_parameter.KeyValidator(v); err != nil {
			return &ValidationError{Name: "key", err: fmt.Errorf(`ent: validator failed for field "System_parameter.key": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Value(); ok {
		if err := system_parameter.ValueValidator(v); err != nil {
			return &ValidationError{Name: "value", err: fmt.Errorf(`ent: validator failed for field "System_parameter.value": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.CreatedBy(); ok {
		if err := system_parameter.CreatedByValidator(v); err != nil {
			return &ValidationError{Name: "created_by", err: fmt.Errorf(`ent: validator failed for field "System_parameter.created_by": %w`, err)}
		}
	}
	return nil
}

func (spuo *SystemParameterUpdateOne) sqlSave(ctx context.Context) (_node *System_parameter, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(system_parameter.Table, system_parameter.Columns, sqlgraph.NewFieldSpec(system_parameter.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "System_parameter.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, system_parameter.FieldID)
		for _, f := range fields {
			if !system_parameter.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != system_parameter.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.Key(); ok {
		_spec.SetField(system_parameter.FieldKey, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Value(); ok {
		_spec.SetField(system_parameter.FieldValue, field.TypeString, value)
	}
	if value, ok := spuo.mutation.IsDeleted(); ok {
		_spec.SetField(system_parameter.FieldIsDeleted, field.TypeBool, value)
	}
	if value, ok := spuo.mutation.CreatedBy(); ok {
		_spec.SetField(system_parameter.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := spuo.mutation.UpdatedBy(); ok {
		_spec.SetField(system_parameter.FieldUpdatedBy, field.TypeString, value)
	}
	if spuo.mutation.UpdatedByCleared() {
		_spec.ClearField(system_parameter.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := spuo.mutation.UpdatedAt(); ok {
		_spec.SetField(system_parameter.FieldUpdatedAt, field.TypeTime, value)
	}
	if spuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(system_parameter.FieldUpdatedAt, field.TypeTime)
	}
	_node = &System_parameter{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{system_parameter.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
